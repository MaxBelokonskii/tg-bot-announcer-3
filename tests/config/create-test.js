#!/usr/bin/env node

/**
 * [RU] CLI —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
 * [EN] CLI script for creating new tests
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
const TEST_TYPES = {
  unit: {
    template: 'unit-test.template.js',
    directory: 'unit',
    placeholders: ['MODULE_NAME'],
    description: '–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –º–æ–¥—É–ª–µ–π'
  },
  integration: {
    template: 'integration-test.template.js',
    directory: 'integration',
    placeholders: ['FEATURE_NAME'],
    description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'
  },
  debug: {
    template: 'debug-test.template.js',
    directory: 'debug',
    placeholders: ['DEBUG_NAME'],
    description: '–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º'
  },
  isolated: {
    template: 'isolated-test.template.js',
    directory: 'isolated',
    placeholders: ['ISOLATED_NAME'],
    description: '–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'
  }
};

/**
 * [RU] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 * [EN] Display usage help
 */
function showHelp() {
  console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞\n');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run create-test <type> <name>\n');
  console.log('–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:');
  
  Object.entries(TEST_TYPES).forEach(([type, config]) => {
    console.log(`  ${type.padEnd(12)} - ${config.description}`);
  });
  
  console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  npm run create-test unit user-validation');
  console.log('  npm run create-test integration attendance-flow');
  console.log('  npm run create-test debug menu-buttons');
  console.log('  npm run create-test isolated simple-functions');
  
  console.log('\n–°–æ–∑–¥–∞–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tests/<type>/');
}

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
 * [EN] Create test from template
 */
function createTest(type, name) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞
  if (!TEST_TYPES[type]) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: ${type}`);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:', Object.keys(TEST_TYPES).join(', '));
    return false;
  }
  
  const config = TEST_TYPES[type];
  const templatePath = path.join(__dirname, 'templates', config.template);
  const testDir = path.join(__dirname, '..', config.directory);
  const testPath = path.join(testDir, `test-${name}.js`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
  if (!fs.existsSync(templatePath)) {
    console.error(`‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ${templatePath}`);
    return false;
  }
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${testDir}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  if (fs.existsSync(testPath)) {
    console.error(`‚ùå –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${testPath}`);
    return false;
  }
  
  try {
    // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    let template = fs.readFileSync(templatePath, 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    config.placeholders.forEach(placeholder => {
      const regex = new RegExp(placeholder, 'g');
      template = template.replace(regex, name);
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
    fs.writeFileSync(testPath, template);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç: ${testPath}`);
    console.log(`üìù –¢–∏–ø: ${config.description}`);
    console.log(`üéØ –®–∞–±–ª–æ–Ω: ${config.template}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log(`1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª: ${testPath}`);
    console.log(`2. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –ª–æ–≥–∏–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    console.log(`3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: npm run test:${type}`);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:', error.message);
    return false;
  }
}

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
 * [EN] Create temporary directory for tests
 */
function ensureTmpDirectory() {
  const tmpDir = path.join(__dirname, '..', 'tmp');
  if (!fs.existsSync(tmpDir)) {
    fs.mkdirSync(tmpDir, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${tmpDir}`);
  }
}

/**
 * [RU] –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 * [EN] Main function
 */
function main() {
  const [, , type, name] = process.argv;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
  if (!type || !name) {
    showHelp();
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  ensureTmpDirectory();
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç
  const success = createTest(type, name);
  process.exit(success ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  createTest,
  TEST_TYPES,
  showHelp
};