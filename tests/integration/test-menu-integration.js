/**
 * [RU] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
 * [EN] Integration tests for new menu button functionality
 */

const Database = require('better-sqlite3');
const path = require('path');
const fs = require('fs');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–ª–∞—Å—Å—ã
const { AttendanceLogic } = require('../../features/attendance/logic');
const { AttendanceAPI } = require('../../features/attendance/api');
const { EventInfoLogic } = require('../../features/event-info/logic');
const { EventInfoAPI } = require('../../features/event-info/api');
const { AdminLogic } = require('../../features/admin/logic');
const { AdminAPI } = require('../../features/admin/api');
const { MainMenu } = require('../../interface/main-menu');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * [EN] Integration testing class
 */
class MenuIntegrationTests {
  constructor() {
    this.testDbPath = path.join(__dirname, 'test-menu.db');
    this.database = null;
  }

  /**
   * [RU] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * [EN] Initialize test database
   */
  async initTestDatabase() {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
    if (fs.existsSync(this.testDbPath)) {
      fs.unlinkSync(this.testDbPath);
    }

    this.database = new Database(this.testDbPath);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const schemaPath = path.join(__dirname, '../../database', 'schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    this.database.exec(schema);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
  }

  /**
   * [RU] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   * [EN] Create test data
   */
  async createTestData() {
    const insertUser = this.database.prepare(`
      INSERT INTO users (telegram_id, full_name, attendance_status, created_at)
      VALUES (?, ?, ?, datetime('now'))
    `);

    const testUsers = [
      ['123456789', '–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤—ã–π', 'attending'],
      ['987654321', '–ú–∞—Ä–∏—è –¢–µ—Å—Ç–æ–≤–∞—è', 'not_attending'],
      ['555666777', '–ü–µ—Ç—Ä –¢–µ—Å—Ç–æ–≤—ã–π', 'maybe'],
      ['111222333', '–ê–Ω–Ω–∞ –ê–¥–º–∏–Ω', 'attending'] // –ë—É–¥–µ—Ç –∞–¥–º–∏–Ω–æ–º –≤ —Ç–µ—Å—Ç–∞—Ö
    ];

    const insertMany = this.database.transaction((users) => {
      for (const user of users) {
        insertUser.run(user);
      }
    });

    insertMany(testUsers);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
  }

  /**
   * [RU] –¢–µ—Å—Ç API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º
   * [EN] Test attendance management API
   */
  async testAttendanceAPI() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AttendanceAPI...');
    
    const api = new AttendanceAPI(this.database);

    try {
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      const status1 = await api.getUserAttendance('123456789');
      console.log(`   ‚úì –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: ${status1}`);

      // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      const updateResult = await api.updateUserAttendance('123456789', 'not_attending');
      console.log(`   ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: ${updateResult.success}`);

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statsResult = await api.getAttendanceStatistics();
      console.log(`   ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${JSON.stringify(statsResult.stats)}`);

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResult = await api.getAllUsersAttendance();
      console.log(`   ‚úì –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersResult.users.length} –Ω–∞–π–¥–µ–Ω–æ`);

      return true;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ AttendanceAPI: ${error.message}`);
      return false;
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º
   * [EN] Test attendance management logic
   */
  async testAttendanceLogic() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AttendanceLogic...');
    
    const logic = new AttendanceLogic(this.database);

    try {
      // –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
      const mockCtx = {
        from: { id: 123456789 },
        answerCbQuery: () => Promise.resolve(),
        reply: (text) => console.log(`   üì± –û—Ç–≤–µ—Ç: ${text}`)
      };

      // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
      const validStatus = logic.isValidAttendanceStatus('attending');
      console.log(`   ‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${validStatus}`);

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
      const statusText = logic.getStatusDisplayText('attending');
      console.log(`   ‚úì –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞: ${statusText}`);

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const stats = await logic.getAttendanceStats();
      console.log(`   ‚úì –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${stats.success}`);

      return true;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ AttendanceLogic: ${error.message}`);
      return false;
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö
   * [EN] Test event info API
   */
  async testEventInfoAPI() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EventInfoAPI...');
    
    const api = new EventInfoAPI(this.database);

    try {
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è
      const detailsResult = await api.getEventDetails();
      console.log(`   ‚úì –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è: ${detailsResult.success}`);

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const infoResult = await api.getUsefulInfo();
      console.log(`   ‚úì –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${infoResult.success}`);

      // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const hasInfoResult = await api.hasCurrentEventInfo();
      console.log(`   ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${hasInfoResult.hasInfo}`);

      return true;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ EventInfoAPI: ${error.message}`);
      return false;
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç API –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
   * [EN] Test admin API
   */
  async testAdminAPI() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdminAPI...');
    
    const api = new AdminAPI(this.database);

    try {
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º
      const usersResult = await api.getAllUsersWithAttendance();
      console.log(`   ‚úì –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º: ${usersResult.users.length} –Ω–∞–π–¥–µ–Ω–æ`);

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userStatsResult = await api.getUserStatistics();
      console.log(`   ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userStatsResult.stats.total} –≤—Å–µ–≥–æ`);

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      const attendanceStatsResult = await api.getAttendanceStatistics();
      console.log(`   ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: ${attendanceStatsResult.stats.total} –≤—Å–µ–≥–æ`);

      // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const searchResult = await api.searchUsersByName('–¢–µ—Å—Ç–æ–≤—ã–π');
      console.log(`   ‚úì –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${searchResult.users.length} –Ω–∞–π–¥–µ–Ω–æ`);

      return true;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ AdminAPI: ${error.message}`);
      return false;
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
   * [EN] Test admin logic
   */
  async testAdminLogic() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdminLogic...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    process.env.ADMIN_ID = '111222333';
    
    const logic = new AdminLogic(this.database);

    try {
      // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
      const isAdmin = logic.isAdmin('111222333');
      console.log(`   ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: ${isAdmin}`);

      const isNotAdmin = logic.isAdmin('123456789');
      console.log(`   ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ-–∞–¥–º–∏–Ω–∞: ${!isNotAdmin}`);

      // –¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResult = await logic.api.getAllUsersWithAttendance();
      if (usersResult.success) {
        const grouped = logic.groupUsersByAttendance(usersResult.users);
        console.log(`   ‚úì –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(grouped).length} –≥—Ä—É–ø–ø`);
      }

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
      const statusText = logic.getStatusDisplayText('attending');
      console.log(`   ‚úì –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞: ${statusText}`);

      return true;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ AdminLogic: ${error.message}`);
      return false;
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
   * [EN] Test main menu
   */
  async testMainMenu() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MainMenu...');
    
    const mainMenu = new MainMenu(this.database);

    try {
      // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMenuItems = mainMenu.generateMenuItems('123456789');
      console.log(`   ‚úì –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userMenuItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

      // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞
      const adminMenuItems = mainMenu.generateMenuItems('111222333');
      console.log(`   ‚úì –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞: ${adminMenuItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∞–¥–º–∏–Ω–∞ –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
      const hasAdminButton = adminMenuItems.some(item => item.callback === 'admin_guest_list');
      console.log(`   ‚úì –£ –∞–¥–º–∏–Ω–∞ –µ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞: ${hasAdminButton}`);

      return true;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ MainMenu: ${error.message}`);
      return false;
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   * [EN] Test component integration
   */
  async testIntegration() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');

    try {
      const attendanceLogic = new AttendanceLogic(this.database);
      const adminLogic = new AdminLogic(this.database);

      // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AttendanceLogic
      const userId = '123456789';
      const newStatus = 'maybe';
      
      const updateResult = await attendanceLogic.api.updateUserAttendance(userId, newStatus);
      console.log(`   ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ AttendanceLogic: ${updateResult.success}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ AdminLogic
      const usersResult = await adminLogic.api.getAllUsersWithAttendance();
      if (usersResult.success) {
        const updatedUser = usersResult.users.find(u => u.telegram_id === userId);
        const statusMatch = updatedUser && updatedUser.attendance_status === newStatus;
        console.log(`   ‚úì –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏–ª—Å—è –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏: ${statusMatch}`);
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsResult = await attendanceLogic.getAttendanceStats();
      if (statsResult.success) {
        const hasStats = statsResult.stats && typeof statsResult.stats.total === 'number';
        console.log(`   ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${hasStats}`);
      }

      return true;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
      return false;
    }
  }

  /**
   * [RU] –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   * [EN] Run all tests
   */
  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫...\n');

    try {
      await this.initTestDatabase();
      await this.createTestData();

      const tests = [
        this.testAttendanceAPI(),
        this.testAttendanceLogic(),
        this.testEventInfoAPI(),
        this.testAdminAPI(),
        this.testAdminLogic(),
        this.testMainMenu(),
        this.testIntegration()
      ];

      const results = await Promise.all(tests);
      const passed = results.filter(result => result).length;
      const total = results.length;

      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: ${passed}/${total} –ø—Ä–æ—à–ª–æ`);

      if (passed === total) {
        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
      } else {
        console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏');
      }

      return passed === total;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
      return false;
    } finally {
      if (this.database) {
        this.database.close();
      }
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
      if (fs.existsSync(this.testDbPath)) {
        fs.unlinkSync(this.testDbPath);
      }
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = {
  MenuIntegrationTests
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const tests = new MenuIntegrationTests();
  tests.runAllTests()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}