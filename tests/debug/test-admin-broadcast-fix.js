/**
 * [RU] –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
 * [EN] Test for admin broadcast fix
 */

const { TelegramBot } = require('../../bot/index');
const { MessageRouter } = require('../../bot/router');
const { AdminLogic } = require('../../features/admin/logic');
const { DatabaseConnection } = require('../../database/connection');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...\n');

async function testAdminBroadcastFix() {
  let database;
  let bot;
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
    database = new DatabaseConnection(':memory:');
    await database.connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ —Å telegram.getMe –º–µ—Ç–æ–¥–æ–º
    const mockBot = {
      telegram: {
        getMe: async () => ({
          id: 123456789,
          username: 'test_bot',
          first_name: 'Test Bot'
        }),
        sendMessage: async (chatId, text, options) => {
          console.log(`üì§ Mock –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${chatId}: ${text.substring(0, 50)}...`);
          return { message_id: Math.floor(Math.random() * 1000) };
        }
      }
    };

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º MessageRouter —Å bot instance
    const router = new MessageRouter(
      database.getDatabase(),
      null, // scheduler
      null, // delivery
      mockBot // bot instance
    );
    console.log('‚úÖ Router —Å–æ–∑–¥–∞–Ω —Å bot instance');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º AdminLogic
    const adminLogic = new AdminLogic(database.getDatabase());
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ context
    const mockCtx = {
      from: { id: process.env.ADMIN_ID || '123456789' },
      callbackQuery: { data: 'admin_confirm_send' },
      answerCbQuery: async () => console.log('üìû answerCbQuery called'),
      editMessageText: async (text, options) => {
        console.log(`‚úèÔ∏è editMessageText: ${text.substring(0, 100)}...`);
        return { message_id: 1 };
      },
      reply: async (text) => {
        console.log(`üí¨ reply: ${text.substring(0, 100)}...`);
        return { message_id: 1 };
      }
    };

    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bot token validation...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bot instance –¥–æ—Å—Ç—É–ø–µ–Ω –≤ router
    if (router.bot) {
      console.log('‚úÖ Router –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ bot instance');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º validateBotToken —á–µ—Ä–µ–∑ MessageDeliveryAPI
      const { MessageDeliveryAPI } = require('../../features/message-delivery/api');
      const messageDeliveryAPI = new MessageDeliveryAPI(database.getDatabase());
      
      const validation = await messageDeliveryAPI.validateBotToken(mockBot);
      
      if (validation.success) {
        console.log('‚úÖ Bot token validation —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log(`   Bot info: ${validation.bot.first_name} (@${validation.bot.username})`);
      } else {
        throw new Error(`Bot token validation failed: ${validation.error}`);
      }
    } else {
      throw new Error('Router –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ bot instance');
    }

    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ admin callback handling...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ admin callback –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å bot instance
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É admin_confirm_send callback
      if (router.bot) {
        console.log('‚úÖ Bot instance –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è admin callbacks');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        database.getDatabase().prepare(`
          INSERT OR IGNORE INTO users (telegram_id, full_name, attendance_status) 
          VALUES (?, ?, ?)
        `).run('test_user_1', 'Test User 1', 'attending');
        
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º confirmMessageSending —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º bot instance
        console.log('üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ confirmMessageSending...');
        
        const result = await adminLogic.confirmMessageSending(mockCtx, router.bot);
        
        if (result.success) {
          console.log('‚úÖ confirmMessageSending –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          console.log(`   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${JSON.stringify(result.deliveryStats)}`);
        } else {
          console.log(`‚ö†Ô∏è confirmMessageSending –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É: ${result.error}`);
          // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
        }
      } else {
        throw new Error('Bot instance –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ router');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ admin callback handling: ${error.message}`);
      throw error;
    }

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
  } catch (error) {
    console.error(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`);
    console.error(`   Stack: ${error.stack}`);
    process.exit(1);
  } finally {
    if (database) {
      database.close();
      console.log('üîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAdminBroadcastFix().then(() => {
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch(error => {
  console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  process.exit(1);
});