/**
 * [RU] –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * [EN] Diagnostic utility for admin message delivery system
 */

const { DatabaseConnection } = require('../../database/connection');
const { AdminAPI } = require('../../features/admin/api');
const { MessageDeliveryAPI } = require('../../features/message-delivery/api');

class AdminMessageDiagnostic {
  constructor() {
    this.database = null;
    this.adminAPI = null;
    this.messageDeliveryAPI = null;
  }

  async initialize() {
    try {
      this.database = new DatabaseConnection(':memory:');
      this.database.connect();
      this.adminAPI = new AdminAPI(this.database.getDatabase());
      this.messageDeliveryAPI = new MessageDeliveryAPI(this.database.getDatabase());
      
      console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkDatabase() {
    try {
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
      const tables = ['users', 'admin_messages', 'delivery_logs', 'scheduled_messages'];
      const results = {};
      
      for (const table of tables) {
        try {
          const count = this.database.getDatabase().prepare(`SELECT COUNT(*) as count FROM ${table}`).get();
          results[table] = count.count;
          console.log(`  üìä ${table}: ${count.count} –∑–∞–ø–∏—Å–µ–π`);
        } catch (error) {
          results[table] = `–û—à–∏–±–∫–∞: ${error.message}`;
          console.log(`  ‚ùå ${table}: –û—à–∏–±–∫–∞ - ${error.message}`);
        }
      }
      
      return { success: true, results };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞)
   */
  async checkBotTokenValidation() {
    try {
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...');
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const mockBot = {
        telegram: {
          getMe: () => Promise.resolve({
            id: 123456789,
            username: 'test_diagnostic_bot',
            first_name: 'Test Bot'
          })
        }
      };

      const result = await this.messageDeliveryAPI.validateBotToken(mockBot);
      
      if (result.success) {
        console.log(`  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        console.log(`  üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: ${result.bot.first_name} (@${result.bot.username})`);
      } else {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${result.error}`);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
   */
  testErrorCategorization() {
    try {
      console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫...');
      
      const testCases = [
        { 
          error: new Error('Forbidden: bot was blocked by the user'),
          expected: 'blocked',
          description: '–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
        },
        {
          error: new Error('Bad Request: chat not found'),
          expected: 'failed', 
          description: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        },
        {
          error: Object.assign(new Error('Too Many Requests: retry after 5'), { code: 429 }),
          expected: 'rate_limited',
          description: '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤'
        },
        {
          error: Object.assign(new Error('Bad Request: message text is empty'), { code: 400 }),
          expected: 'failed',
          description: '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
        },
        {
          error: new Error('Network error'),
          expected: 'failed',
          description: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞'
        }
      ];

      let passed = 0;
      let failed = 0;

      for (const testCase of testCases) {
        const result = this.messageDeliveryAPI.categorizeError(testCase.error);
        
        if (result === testCase.expected) {
          console.log(`  ‚úÖ ${testCase.description}: ${result}`);
          passed++;
        } else {
          console.log(`  ‚ùå ${testCase.description}: –æ–∂–∏–¥–∞–ª–æ—Å—å '${testCase.expected}', –ø–æ–ª—É—á–µ–Ω–æ '${result}'`);
          failed++;
        }
      }

      console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed} —É—Å–ø–µ—à–Ω–æ, ${failed} –Ω–µ—É–¥–∞—á–Ω–æ`);
      
      return { success: failed === 0, passed, failed };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  testAdminMessageDetection() {
    try {
      console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
      
      const testCases = [
        { messageId: 'admin_test_123', expected: true, description: '–¢–µ—Å—Ç–æ–≤–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        { messageId: 'admin_diagnostic', expected: true, description: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        { messageId: 'admin_broadcast_456', expected: true, description: '–ê–¥–º–∏–Ω—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞' },
        { messageId: 'regular_message_789', expected: false, description: '–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        { messageId: '123', expected: false, description: '–ß–∏—Å–ª–æ–≤–æ–π ID' },
        { messageId: null, expected: false, description: 'null' },
        { messageId: undefined, expected: false, description: 'undefined' }
      ];

      let passed = 0;
      let failed = 0;

      for (const testCase of testCases) {
        const result = this.messageDeliveryAPI.isAdminMessage(testCase.messageId);
        
        if (result === testCase.expected) {
          console.log(`  ‚úÖ ${testCase.description} (${testCase.messageId}): ${result}`);
          passed++;
        } else {
          console.log(`  ‚ùå ${testCase.description} (${testCase.messageId}): –æ–∂–∏–¥–∞–ª–æ—Å—å ${testCase.expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}`);
          failed++;
        }
      }

      console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed} —É—Å–ø–µ—à–Ω–æ, ${failed} –Ω–µ—É–¥–∞—á–Ω–æ`);
      
      return { success: failed === 0, passed, failed };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async checkAdminMessageHistory() {
    try {
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
      
      const history = await this.adminAPI.getTestMessageHistory(10);
      
      if (history.success) {
        console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ ${history.count} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏`);
        
        if (history.count > 0) {
          console.log('  üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:');
          history.history.slice(0, 3).forEach((message, index) => {
            console.log(`    ${index + 1}. ${message.sentAt}: ${message.deliveryStats.delivered}/${message.deliveryStats.total} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`);
          });
        } else {
          console.log('  ‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ - –µ—â—ë –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–æ–∫');
        }
      } else {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${history.error}`);
      }
      
      return history;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞)
   */
  async simulateTestMessageSending() {
    try {
      console.log('\nüîç –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
      const mockBot = {
        telegram: {
          getMe: () => Promise.resolve({
            id: 123456789,
            username: 'test_diagnostic_bot',
            first_name: 'Test Bot'
          }),
          sendMessage: () => Promise.resolve({ message_id: 123 })
        }
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResult = await this.messageDeliveryAPI.getActiveUsers();
      
      if (!usersResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResult.error}`);
      }

      const userCount = usersResult.users.length;
      console.log(`  üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${userCount}`);
      
      if (userCount === 0) {
        console.log('  ‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (–¢–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)');
        return { success: true, message: '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' };
      }

      console.log('  ‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
      console.log(`  üìã –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${userCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      
      return { 
        success: true, 
        userCount,
        message: '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ'
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  async runFullDiagnostic() {
    console.log('üîß –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('=' .repeat(70));
    
    const results = {};
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    results.initialization = await this.initialize();
    if (!results.initialization.success) {
      return results;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    results.database = await this.checkDatabase();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–æ—Ç–∞
    results.botValidation = await this.checkBotTokenValidation();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
    results.errorCategorization = this.testErrorCategorization();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π  
    results.adminMessageDetection = this.testAdminMessageDetection();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    results.messageHistory = await this.checkAdminMessageHistory();
    
    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    results.messageSimulation = await this.simulateTestMessageSending();

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
    console.log('=' .repeat(50));
    
    let allPassed = true;
    const checks = [
      { name: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', result: results.initialization.success },
      { name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', result: results.database.success },
      { name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –±–æ—Ç–∞', result: results.botValidation.success },
      { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫', result: results.errorCategorization.success },
      { name: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π', result: results.adminMessageDetection.success },
      { name: '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', result: results.messageHistory.success },
      { name: '–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏', result: results.messageSimulation.success }
    ];

    checks.forEach(check => {
      const status = check.result ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù';
      console.log(`${check.name}: ${status}`);
      if (!check.result) allPassed = false;
    });

    console.log('\n' + '=' .repeat(50));
    
    if (allPassed) {
      console.log('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.');
    } else {
      console.log('‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.');
    }

    return results;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanup() {
    if (this.database) {
      this.database.close();
      console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { AdminMessageDiagnostic };

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  (async () => {
    const diagnostic = new AdminMessageDiagnostic();
    
    try {
      await diagnostic.runFullDiagnostic();
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    } finally {
      await diagnostic.cleanup();
    }
  })();
}