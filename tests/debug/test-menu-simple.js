/**
 * [RU] –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é  
 * [EN] Simple test for main menu functionality fix
 */

const texts = require('../../bot/texts');
const { createInlineKeyboard } = require('../../utils/message-helpers');

// Mock –¥–ª—è AdminLogic –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockAdminLogic {
  isAdmin(userId) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ ID –∏–ª–∏ –µ—Å–ª–∏ ADMIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    return userId === process.env.ADMIN_ID || userId === 'admin_test_id';
  }
}

// –°–∏–º—É–ª—è—Ü–∏—è generateMenuItems –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function generateMenuItems(userId) {
  const adminLogic = new MockAdminLogic();
  const isAdmin = adminLogic.isAdmin(userId);
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const menuItems = [
    { text: texts.menu.buttons.changeAttendance, callback_data: 'change_attendance' },
    { text: texts.menu.buttons.eventDetails, callback_data: 'event_details' },
    { text: texts.menu.buttons.usefulInfo, callback_data: 'useful_info' },
    { text: texts.menu.buttons.upcomingEvents, callback_data: 'upcoming_events' },
    { text: texts.menu.buttons.help, callback_data: 'help' }
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  if (isAdmin) {
    menuItems.splice(3, 0, { text: texts.menu.buttons.adminGuestList, callback_data: 'admin_guest_list' });
  }

  return menuItems;
}

function testMenuGeneration() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

  try {
    // –¢–µ—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    const regularUserItems = generateMenuItems("123456789");
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: ${regularUserItems.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–Ω–æ–ø–æ–∫
    let hasErrors = false;
    regularUserItems.forEach((item, index) => {
      console.log(`   –ö–Ω–æ–ø–∫–∞ ${index + 1}: "${item.text}" -> callback_data: "${item.callback_data}"`);
      
      if (!item.text || !item.callback_data) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ ${index + 1}:`, item);
        hasErrors = true;
      }
    });

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    console.log("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
    const keyboard = createInlineKeyboard(regularUserItems, 2);
    console.log("   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:", keyboard ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞");

    // –¢–µ—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log("\nüëë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    const adminItems = generateMenuItems("admin_test_id");
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: ${adminItems.length}`);
    
    adminItems.forEach((item, index) => {
      console.log(`   –ö–Ω–æ–ø–∫–∞ ${index + 1}: "${item.text}" -> callback_data: "${item.callback_data}"`);
      
      if (!item.text || !item.callback_data) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–Ω–æ–ø–∫–µ ${index + 1}:`, item);
        hasErrors = true;
      }
    });
    
    const adminKeyboard = createInlineKeyboard(adminItems, 2);
    console.log("   –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:", adminKeyboard ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É –∞–¥–º–∏–Ω–∞ –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫
    if (adminItems.length > regularUserItems.length) {
      console.log("   ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏");
    } else {
      console.log("   ‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–º–µ–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫");
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!hasErrors) {
      console.log("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
      console.log("üí° –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:");
      console.log("   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ 'callback' –Ω–∞ 'callback_data' –≤ –∫–Ω–æ–ø–∫–∞—Ö");
      console.log("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–Ω–æ–ø–æ–∫");
      console.log("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫");
      return true;
    } else {
      console.log("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–Ω–æ–ø–æ–∫.");
      return false;
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message);
    console.error("   –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error.stack);
    return false;
  }
}

// –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
function testButtonStructure() {
  console.log("\nüîç –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–Ω–æ–ø–æ–∫:");
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
  const testButtons = [
    { text: "–¢–µ—Å—Ç 1", callback_data: "test1" },
    { text: "–¢–µ—Å—Ç 2", callback_data: "test2" }
  ];
  
  console.log("   –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:", testButtons);
  
  const testKeyboard = createInlineKeyboard(testButtons, 2);
  console.log("   –¢–µ—Å—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:", testKeyboard ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞");
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
  const wrongButtons = [
    { text: "–¢–µ—Å—Ç 3", callback: "test3" }, // —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ fallback
    { text: "–¢–µ—Å—Ç 4", callback_data: "test4" } // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  ];
  
  console.log("   –°–º–µ—à–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:", wrongButtons);
  
  const mixedKeyboard = createInlineKeyboard(wrongButtons, 2);
  console.log("   –°–º–µ—à–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:", mixedKeyboard ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞");
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
  const brokenButtons = [
    { callback_data: "broken1" }, // –Ω–µ—Ç text
    { text: "–¢–µ—Å—Ç 5" } // –Ω–µ—Ç callback_data
  ];
  
  console.log("   –°–ª–æ–º–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:", brokenButtons);
  
  const brokenKeyboard = createInlineKeyboard(brokenButtons, 2);
  console.log("   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—à–∏–±–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞:", brokenKeyboard ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞");
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
function runTests() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é\n");
  
  // –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  testButtonStructure();
  
  // –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é
  const success = testMenuGeneration();
  
  console.log("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
  
  if (success) {
    console.log("\nüéâ –£–°–ü–ï–•: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!");
    console.log("   –¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ /menu –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
  } else {
    console.log("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.");
  }
  
  return success;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª–∞
if (require.main === module) {
  const success = runTests();
  process.exit(success ? 0 : 1);
}

module.exports = {
  generateMenuItems,
  testMenuGeneration,
  testButtonStructure,
  runTests
};