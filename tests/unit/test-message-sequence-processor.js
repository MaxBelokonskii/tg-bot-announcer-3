/**
 * [RU] –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è MessageSequenceProcessor
 * [EN] Unit tests for MessageSequenceProcessor
 */

const { MessageSequenceProcessor } = require('../../utils/message-sequence-processor');
const { EventInfoAPI } = require('../../features/event-info/api');
const { MainMenu } = require('../../interface/main-menu');

// –ú–æ–∫-–æ–±—ä–µ–∫—Ç—ã
const mockDatabase = {
  prepare: jest.fn(),
  exec: jest.fn()
};

const mockBot = {
  telegram: {
    sendMessage: jest.fn()
  }
};

const mockEventInfoAPI = {
  getUsefulInfo: jest.fn(),
  getEventDetails: jest.fn()
};

const mockMainMenu = {
  show: jest.fn()
};

describe('MessageSequenceProcessor', () => {
  let processor;

  beforeEach(() => {
    processor = new MessageSequenceProcessor(mockDatabase);
    processor.eventInfoAPI = mockEventInfoAPI;
    processor.mainMenu = mockMainMenu;
    
    // –û—á–∏—â–∞–µ–º –º–æ–∫–∏
    jest.clearAllMocks();
  });

  describe('processUserMessageSequence', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      mockEventInfoAPI.getUsefulInfo.mockResolvedValue({
        success: true,
        info: ['–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
      });

      mockEventInfoAPI.getEventDetails.mockResolvedValue({
        success: true,
        details: {
          name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ',
          date: '2025-01-01',
          time: '18:00'
        }
      });

      mockMainMenu.show.mockResolvedValue({ success: true });
      mockBot.telegram.sendMessage.mockResolvedValue({ message_id: 123 });

      const result = await processor.processUserMessageSequence(
        mockBot,
        '123456789',
        '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        {
          includeUsefulInfo: true,
          includeEventDetails: true,
          triggerMenu: true,
          sequenceDelay: 100
        }
      );

      expect(result.success).toBe(true);
      expect(result.results.completedSteps).toBe(4);
      expect(result.results.totalSteps).toBe(4);
      expect(result.completionRate).toBe(100);
    });

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–±–æ–∏', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ —Å–±–æ—è–º–∏
      mockEventInfoAPI.getUsefulInfo.mockResolvedValue({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
      });

      mockEventInfoAPI.getEventDetails.mockResolvedValue({
        success: true,
        details: { name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ' }
      });

      mockMainMenu.show.mockResolvedValue({ success: true });
      mockBot.telegram.sendMessage.mockResolvedValue({ message_id: 123 });

      const result = await processor.processUserMessageSequence(
        mockBot,
        '123456789',
        '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      );

      expect(result.success).toBe(true); // –£—Å–ø–µ—à–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥
      expect(result.results.completedSteps).toBe(3); // admin_message + event_details + menu_trigger
      expect(result.results.errors.length).toBe(1);
      expect(result.results.errors[0].step).toBe('usefulInfo');
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
      mockBot.telegram.sendMessage.mockRejectedValue(new Error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏'));

      const result = await processor.processUserMessageSequence(
        mockBot,
        '123456789',
        '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      );

      expect(result.success).toBe(false);
      expect(result.criticalError).toContain('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    });
  });

  describe('sendUsefulInformation', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', async () => {
      mockEventInfoAPI.getUsefulInfo.mockResolvedValue({
        success: true,
        info: ['–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 1', '–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 2']
      });

      mockBot.telegram.sendMessage.mockResolvedValue({ message_id: 123 });

      const result = await processor.sendUsefulInformation(mockBot, '123456789');

      expect(result.success).toBe(true);
      expect(mockBot.telegram.sendMessage).toHaveBeenCalledWith(
        '123456789',
        expect.stringContaining('üìã <b>–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>'),
        expect.objectContaining({
          parse_mode: 'HTML'
        })
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', async () => {
      mockEventInfoAPI.getUsefulInfo.mockResolvedValue({
        success: false,
        error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      });

      const result = await processor.sendUsefulInformation(mockBot, '123456789');

      expect(result.success).toBe(false);
      expect(result.error).toContain('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    });
  });

  describe('sendEventDetails', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è', async () => {
      mockEventInfoAPI.getEventDetails.mockResolvedValue({
        success: true,
        details: {
          name: '–°–≤–∞–¥–µ–±–Ω–æ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ',
          date: '13 —Å–µ–Ω—Ç—è–±—Ä—è 2025',
          time: '17:00',
          location: '–õ–æ—Ñ—Ç –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∏–∫'
        }
      });

      mockBot.telegram.sendMessage.mockResolvedValue({ message_id: 123 });

      const result = await processor.sendEventDetails(mockBot, '123456789');

      expect(result.success).toBe(true);
      expect(mockBot.telegram.sendMessage).toHaveBeenCalledWith(
        '123456789',
        expect.stringContaining('üìÖ <b>–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è</b>'),
        expect.objectContaining({
          parse_mode: 'HTML'
        })
      );
    });
  });

  describe('triggerMainMenu', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async () => {
      mockMainMenu.show.mockResolvedValue({ success: true });

      const result = await processor.triggerMainMenu(mockBot, '123456789');

      expect(result.success).toBe(true);
      expect(mockMainMenu.show).toHaveBeenCalled();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é', async () => {
      mockMainMenu.show.mockResolvedValue({
        success: false,
        error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'
      });

      const result = await processor.triggerMainMenu(mockBot, '123456789');

      expect(result.success).toBe(false);
      expect(result.error).toContain('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é');
    });
  });

  describe('validateSequenceCompletion', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', () => {
      const sequenceResults = {
        results: {
          steps: {
            adminMessage: { success: true },
            usefulInfo: { success: true },
            eventDetails: { success: true },
            menuTrigger: { success: true }
          },
          totalSteps: 4,
          completedSteps: 4
        }
      };

      const validation = processor.validateSequenceCompletion(sequenceResults);

      expect(validation.valid).toBe(true);
      expect(validation.completionRate).toBe(100);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –Ω–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', () => {
      const sequenceResults = {
        results: {
          steps: {
            adminMessage: { success: true },
            usefulInfo: { success: false },
            eventDetails: { success: false },
            menuTrigger: { success: false }
          },
          totalSteps: 4,
          completedSteps: 1
        }
      };

      const validation = processor.validateSequenceCompletion(sequenceResults);

      expect(validation.valid).toBe(false);
      expect(validation.reason).toContain('–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    });
  });

  describe('createSyntheticContext', () => {
    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç', () => {
      const ctx = processor.createSyntheticContext(mockBot, '123456789');

      expect(ctx.from.id).toBe(123456789);
      expect(ctx.telegram).toBe(mockBot.telegram);
      expect(typeof ctx.reply).toBe('function');
      expect(typeof ctx.replyWithHTML).toBe('function');
    });
  });
});

module.exports = {
  MessageSequenceProcessor
};