/**
 * [RU] –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—è username –≤ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * [EN] Comprehensive tests for username field in database schema
 */

const { getDatabaseConnection } = require('../../database/connection');
const { UserUtils } = require('../../utils/db-utils');
const fs = require('fs');

/**
 * [RU] –¢–µ—Å—Ç-—Å—å—é—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ username
 * [EN] Test suite for username validation
 */
class UsernameValidationTests {
  constructor() {
    this.testDbPath = './test_username_database.db';
    this.db = null;
    this.userUtils = null;
    this.testResults = [];
  }

  /**
   * [RU] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * [EN] Initialize test database
   */
  async setupTestDatabase() {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fs.existsSync(this.testDbPath)) {
      fs.unlinkSync(this.testDbPath);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const dbConnection = getDatabaseConnection(this.testDbPath);
    this.db = dbConnection.connect();
    this.userUtils = new UserUtils(this.db);

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
  }

  /**
   * [RU] –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   * [EN] Cleanup test database
   */
  async cleanupTestDatabase() {
    if (this.db) {
      this.db.close();
    }
    
    if (fs.existsSync(this.testDbPath)) {
      fs.unlinkSync(this.testDbPath);
    }

    console.log('üßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
  }

  /**
   * [RU] –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
   * [EN] Helper function to add test result
   */
  addTestResult(testName, passed, message = '', actualValue = null, expectedValue = null) {
    this.testResults.push({
      testName,
      passed,
      message,
      actualValue,
      expectedValue,
      timestamp: new Date().toISOString()
    });

    const status = passed ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${testName}: ${message}`);
    
    if (!passed && actualValue !== null && expectedValue !== null) {
      console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedValue}`);
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${actualValue}`);
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—è username –≤ —Å—Ö–µ–º–µ
   * [EN] Test: Check username field exists in schema
   */
  async testUsernameFieldExists() {
    try {
      const schema = this.userUtils.getTableSchema('users');
      const usernameColumn = schema.find(col => col.name === 'username');

      if (usernameColumn) {
        this.addTestResult(
          'Username Field Exists', 
          true, 
          `–ü–æ–ª–µ username –Ω–∞–π–¥–µ–Ω–æ —Å —Ç–∏–ø–æ–º ${usernameColumn.type}`
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–µ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL
        if (!usernameColumn.notnull) {
          this.addTestResult(
            'Username Field Nullable', 
            true, 
            '–ü–æ–ª–µ username –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏—è'
          );
        } else {
          this.addTestResult(
            'Username Field Nullable', 
            false, 
            '–ü–æ–ª–µ username –¥–æ–ª–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∞—Ç—å NULL –∑–Ω–∞—á–µ–Ω–∏—è'
          );
        }
      } else {
        this.addTestResult(
          'Username Field Exists', 
          false, 
          '–ü–æ–ª–µ username –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ö–µ–º–µ —Ç–∞–±–ª–∏—Ü—ã users'
        );
      }
    } catch (error) {
      this.addTestResult(
        'Username Field Exists', 
        false, 
        `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã: ${error.message}`
      );
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –ø–æ–ª—è username
   * [EN] Test: Check username index exists
   */
  async testUsernameIndexExists() {
    try {
      const indexes = this.db.prepare(`PRAGMA index_list(users)`).all();
      const usernameIndex = indexes.find(idx => idx.name === 'idx_users_username');

      if (usernameIndex) {
        this.addTestResult(
          'Username Index Exists', 
          true, 
          '–ò–Ω–¥–µ–∫—Å idx_users_username –Ω–∞–π–¥–µ–Ω'
        );
      } else {
        this.addTestResult(
          'Username Index Exists', 
          false, 
          '–ò–Ω–¥–µ–∫—Å idx_users_username –Ω–µ –Ω–∞–π–¥–µ–Ω'
        );
      }
    } catch (error) {
      this.addTestResult(
        'Username Index Exists', 
        false, 
        `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: ${error.message}`
      );
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç: –í–∞–ª–∏–¥–∞—Ü–∏—è username —Ñ—É–Ω–∫—Ü–∏–∏
   * [EN] Test: Username validation function
   */
  async testUsernameValidation() {
    const testCases = [
      // –í–∞–ª–∏–¥–Ω—ã–µ username
      { input: 'valid_user', expected: 'valid_user', description: '–í–∞–ª–∏–¥–Ω—ã–π username' },
      { input: '@valid_user', expected: 'valid_user', description: 'Username —Å @ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º' },
      { input: 'user123', expected: 'user123', description: 'Username —Å —Ü–∏—Ñ—Ä–∞–º–∏' },
      { input: 'test_user_name', expected: 'test_user_name', description: 'Username —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏' },
      { input: 'User_123', expected: 'User_123', description: 'Username —Å–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä' },

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ username
      { input: '', expected: null, description: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞' },
      { input: null, expected: null, description: 'NULL –∑–Ω–∞—á–µ–Ω–∏–µ' },
      { input: undefined, expected: null, description: 'Undefined –∑–Ω–∞—á–µ–Ω–∏–µ' },
      { input: 'abc', expected: null, description: '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π username (< 5 —Å–∏–º–≤–æ–ª–æ–≤)' },
      { input: 'a'.repeat(33), expected: null, description: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π username (> 32 —Å–∏–º–≤–æ–ª–æ–≤)' },
      { input: 'invalid-user', expected: null, description: 'Username —Å –¥–µ—Ñ–∏—Å–æ–º' },
      { input: 'invalid user', expected: null, description: 'Username —Å –ø—Ä–æ–±–µ–ª–æ–º' },
      { input: 'invalid.user', expected: null, description: 'Username —Å —Ç–æ—á–∫–æ–π' },
      { input: 'invalid@user', expected: null, description: 'Username —Å @ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ' },
      { input: 'user!', expected: null, description: 'Username —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏' }
    ];

    for (const testCase of testCases) {
      try {
        const result = this.userUtils.validateUsername(testCase.input);
        const passed = result === testCase.expected;
        
        this.addTestResult(
          `Username Validation: ${testCase.description}`,
          passed,
          `–í—Ö–æ–¥: "${testCase.input}" -> –†–µ–∑—É–ª—å—Ç–∞—Ç: "${result}"`,
          result,
          testCase.expected
        );
      } catch (error) {
        this.addTestResult(
          `Username Validation: ${testCase.description}`,
          false,
          `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`
        );
      }
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username
   * [EN] Test: Create user with username
   */
  async testCreateUserWithUsername() {
    const testCases = [
      { telegramId: '12345', fullName: 'Test User 1', username: 'test_user1' },
      { telegramId: '12346', fullName: 'Test User 2', username: '@test_user2' },
      { telegramId: '12347', fullName: 'Test User 3', username: null },
      { telegramId: '12348', fullName: 'Test User 4', username: '' },
      { telegramId: '12349', fullName: 'Test User 5', username: 'invalid!' } // –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å null
    ];

    for (const testCase of testCases) {
      try {
        const result = this.userUtils.createUser(
          testCase.telegramId, 
          testCase.fullName, 
          testCase.username
        );

        if (result.success) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª—Å—è
          const user = this.userUtils.findUserByTelegramId(testCase.telegramId);
          
          if (user) {
            this.addTestResult(
              `Create User: ${testCase.fullName}`,
              true,
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å username: "${user.username}"`
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ username
            const expectedUsername = this.userUtils.validateUsername(testCase.username);
            if (user.username === expectedUsername) {
              this.addTestResult(
                `Username Processing: ${testCase.fullName}`,
                true,
                `Username –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`
              );
            } else {
              this.addTestResult(
                `Username Processing: ${testCase.fullName}`,
                false,
                `Username –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`,
                user.username,
                expectedUsername
              );
            }
          } else {
            this.addTestResult(
              `Create User: ${testCase.fullName}`,
              false,
              '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è'
            );
          }
        } else {
          this.addTestResult(
            `Create User: ${testCase.fullName}`,
            false,
            `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${result.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          );
        }
      } catch (error) {
        this.addTestResult(
          `Create User: ${testCase.fullName}`,
          false,
          `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: ${error.message}`
        );
      }
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
   * [EN] Test: Find user by username
   */
  async testFindUserByUsername() {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userUtils.createUser('search_test_123', 'Search Test User', 'search_test');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
      const foundUser = this.userUtils.findUserByUsername('search_test');
      
      if (foundUser && foundUser.username === 'search_test') {
        this.addTestResult(
          'Find User By Username',
          true,
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ username'
        );
      } else {
        this.addTestResult(
          'Find User By Username',
          false,
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ username'
        );
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ username
      const notFoundUser = this.userUtils.findUserByUsername('nonexistent_user');
      
      if (!notFoundUser) {
        this.addTestResult(
          'Find Nonexistent User By Username',
          true,
          '–ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ username –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null'
        );
      } else {
        this.addTestResult(
          'Find Nonexistent User By Username',
          false,
          '–ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ username –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null'
        );
      }
    } catch (error) {
      this.addTestResult(
        'Find User By Username',
        false,
        `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`
      );
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username
   * [EN] Test: Update username
   */
  async testUpdateUsername() {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userUtils.createUser('update_test_123', 'Update Test User', 'old_username');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º username
      const updateResult = this.userUtils.updateUsername('update_test_123', 'new_username');
      
      if (updateResult.success) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ username –æ–±–Ω–æ–≤–∏–ª—Å—è
        const user = this.userUtils.findUserByTelegramId('update_test_123');
        
        if (user && user.username === 'new_username') {
          this.addTestResult(
            'Update Username',
            true,
            'Username —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
          );
        } else {
          this.addTestResult(
            'Update Username',
            false,
            'Username –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            user ? user.username : 'user not found',
            'new_username'
          );
        }
      } else {
        this.addTestResult(
          'Update Username',
          false,
          '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è username'
        );
      }
    } catch (error) {
      this.addTestResult(
        'Update Username',
        false,
        `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${error.message}`
      );
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É username
   * [EN] Test: Search users by partial username
   */
  async testSearchUsersByUsername() {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      this.userUtils.createUser('search1_123', 'Search User 1', 'searchable_user1');
      this.userUtils.createUser('search2_123', 'Search User 2', 'searchable_user2');
      this.userUtils.createUser('search3_123', 'Search User 3', 'different_name');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
      const searchResults = this.userUtils.searchUsersByUsername('searchable');
      
      if (searchResults.length === 2) {
        this.addTestResult(
          'Search Users By Username',
          true,
          `–ù–∞–π–¥–µ–Ω–æ ${searchResults.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É username`
        );
      } else {
        this.addTestResult(
          'Search Users By Username',
          false,
          `–û–∂–∏–¥–∞–ª–æ—Å—å 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–π–¥–µ–Ω–æ ${searchResults.length}`,
          searchResults.length,
          2
        );
      }
    } catch (error) {
      this.addTestResult(
        'Search Users By Username',
        false,
        `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`
      );
    }
  }

  /**
   * [RU] –¢–µ—Å—Ç: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
   * [EN] Test: Backward compatibility
   */
  async testBackwardCompatibility() {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º (–±–µ–∑ username)
      const oldWayResult = this.userUtils.createUser('backward_test_123', 'Backward Test User');
      
      if (oldWayResult.success) {
        const user = this.userUtils.findUserByTelegramId('backward_test_123');
        
        if (user && user.username === null) {
          this.addTestResult(
            'Backward Compatibility',
            true,
            '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ username —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
          );
        } else {
          this.addTestResult(
            'Backward Compatibility',
            false,
            'Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∑ –Ω–µ–≥–æ',
            user ? user.username : 'user not found',
            null
          );
        }
      } else {
        this.addTestResult(
          'Backward Compatibility',
          false,
          '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º'
        );
      }
    } catch (error) {
      this.addTestResult(
        'Backward Compatibility',
        false,
        `–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${error.message}`
      );
    }
  }

  /**
   * [RU] –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   * [EN] Run all tests
   */
  async runAllTests() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ username...\n');

    try {
      await this.setupTestDatabase();

      // –¢–µ—Å—Ç—ã —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.testUsernameFieldExists();
      await this.testUsernameIndexExists();

      // –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      await this.testUsernameValidation();

      // –¢–µ—Å—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      await this.testCreateUserWithUsername();
      await this.testFindUserByUsername();
      await this.testUpdateUsername();
      await this.testSearchUsersByUsername();
      await this.testBackwardCompatibility();

    } finally {
      await this.cleanupTestDatabase();
    }

    return this.generateTestReport();
  }

  /**
   * [RU] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   * [EN] Generate test report
   */
  generateTestReport() {
    const passedTests = this.testResults.filter(r => r.passed).length;
    const totalTests = this.testResults.length;
    const failedTests = totalTests - passedTests;

    const report = {
      summary: {
        total: totalTests,
        passed: passedTests,
        failed: failedTests,
        passRate: ((passedTests / totalTests) * 100).toFixed(1) + '%'
      },
      results: this.testResults,
      timestamp: new Date().toISOString()
    };

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
    console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${report.summary.passRate}`);

    if (failedTests > 0) {
      console.log('\n‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:');
      this.testResults
        .filter(r => !r.passed)
        .forEach(test => {
          console.log(`   - ${test.testName}: ${test.message}`);
        });
    }

    return report;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const tests = new UsernameValidationTests();
  tests.runAllTests()
    .then(report => {
      if (report.summary.failed > 0) {
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
      process.exit(1);
    });
}

module.exports = { UsernameValidationTests };