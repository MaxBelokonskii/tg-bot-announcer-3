/**
 * [RU] –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è Reply Keyboard
 * [EN] Tests for Reply Keyboard removal functionality
 */

// –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
jest.mock('../../utils/message-helpers', () => ({
  ...jest.requireActual('../../utils/message-helpers'),
  safeSendMessage: jest.fn().mockResolvedValue({ success: true }),
  logUserAction: jest.fn(),
  createKeyboard: jest.fn()
}));

// –ú–æ–∫–∞–µ–º texts
jest.mock('../../bot/texts', () => ({
  formatText: jest.fn((template, vars) => template.replace(/{(\w+)}/g, (match, key) => vars[key] || match)),
  welcome: {
    alreadyRegistered: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!',
    registrationComplete: '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
    nameConfirm: '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!'
  },
  menu: {
    description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
  },
  errors: {
    general: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
  }
}));

// –ú–æ–∫–∞–µ–º OnboardingAPI
jest.mock('../../features/onboarding/api', () => ({
  OnboardingAPI: jest.fn().mockImplementation(() => ({
    userExists: jest.fn(),
    getUser: jest.fn(),
    createUser: jest.fn(),
    syncTelegramUsername: jest.fn()
  }))
}));

const { OnboardingLogic } = require('../../features/onboarding/logic');
const { createKeyboard } = require('../../utils/message-helpers');

describe('Reply Keyboard Removal Tests', () => {
  let onboardingLogic;
  let mockCtx;
  let mockAPI;

  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ API
    mockAPI = {
      userExists: jest.fn(),
      getUser: jest.fn(),
      createUser: jest.fn(),
      syncTelegramUsername: jest.fn()
    };
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    onboardingLogic = new OnboardingLogic(mockAPI);
    
    // –ó–∞–º–µ–Ω—è–µ–º API –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
    onboardingLogic.api = mockAPI;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –º–æ–∫–∏
    jest.clearAllMocks();
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    mockCtx = {
      from: {
        id: 12345,
        username: 'testuser',
        first_name: 'Test'
      },
      chat: {
        id: 12345
      },
      reply: jest.fn().mockResolvedValue({ message_id: 1 })
    };
  });

  describe('handleExistingUser', () => {
    it('should not create Reply Keyboard for existing users', async () => {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
      mockAPI.userExists.mockResolvedValue(true);
      mockAPI.getUser.mockResolvedValue({
        id: 1,
        full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        telegram_id: '12345'
      });
      mockAPI.syncTelegramUsername.mockResolvedValue();

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      const result = await onboardingLogic.handleExistingUser(mockCtx);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞
      expect(result.success).toBe(true);
      expect(createKeyboard).not.toHaveBeenCalled();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ safeSendMessage –≤—ã–∑–≤–∞–Ω–∞ —Å null –≤–º–µ—Å—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      const { safeSendMessage } = require('../../utils/message-helpers');
      expect(safeSendMessage).toHaveBeenCalledWith(
        mockCtx,
        expect.stringContaining('üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu'),
        null,
        { parseMode: 'HTML' }
      );
    });

    it('should include /menu instruction in message text', async () => {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
      mockAPI.userExists.mockResolvedValue(true);
      mockAPI.getUser.mockResolvedValue({
        id: 1,
        full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        telegram_id: '12345'
      });
      mockAPI.syncTelegramUsername.mockResolvedValue();

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      await onboardingLogic.handleExistingUser(mockCtx);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞
      const { safeSendMessage } = require('../../utils/message-helpers');
      const calledArgs = safeSendMessage.mock.calls[0];
      const messageText = calledArgs[1];
      
      expect(messageText).toContain('üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞');
    });
  });

  describe('completeOnboarding', () => {
    it('should not create Reply Keyboard after onboarding completion', async () => {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
      const mockUser = {
        id: 1,
        full_name: '–ù–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        telegram_id: '12345'
      };

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      await onboardingLogic.completeOnboarding(mockCtx, mockUser);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞
      expect(createKeyboard).not.toHaveBeenCalled();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ safeSendMessage –≤—ã–∑–≤–∞–Ω–∞ —Å null –≤–º–µ—Å—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      const { safeSendMessage } = require('../../utils/message-helpers');
      expect(safeSendMessage).toHaveBeenCalledWith(
        mockCtx,
        expect.stringContaining('üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu'),
        null,
        { parseMode: 'HTML' }
      );
    });

    it('should include /menu instruction in completion message', async () => {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
      const mockUser = {
        id: 1,
        full_name: '–ù–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        telegram_id: '12345'
      };

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      await onboardingLogic.completeOnboarding(mockCtx, mockUser);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞
      const { safeSendMessage } = require('../../utils/message-helpers');
      const calledArgs = safeSendMessage.mock.calls[0];
      const messageText = calledArgs[1];
      
      expect(messageText).toContain('üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º');
    });
  });

  describe('createKeyboard deprecation', () => {
    it('should log deprecation warning when createKeyboard is called', () => {
      // –ú–æ–∫–∞–µ–º console.warn
      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const { createKeyboard: realCreateKeyboard } = jest.requireActual('../../utils/message-helpers');
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      realCreateKeyboard(['Test Button']);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞
      expect(consoleSpy).toHaveBeenCalledWith('‚ö†Ô∏è createKeyboard deprecated. Use createInlineKeyboard instead.');
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º console.warn
      consoleSpy.mockRestore();
    });
  });

  describe('Integration test for onboarding flow', () => {
    it('should complete onboarding flow without Reply Keyboard', async () => {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      mockAPI.userExists.mockResolvedValue(false);
      mockAPI.createUser.mockResolvedValue({
        success: true,
        user: {
          id: 1,
          full_name: '–ù–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          telegram_id: '12345',
          username: 'testuser'
        }
      });

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º
      const nameCtx = {
        ...mockCtx,
        message: { text: '–ù–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' }
      };

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: –Ω–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
      const startResult = await onboardingLogic.startOnboarding(mockCtx);
      expect(startResult.success).toBe(true);

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å –≤–≤–æ–¥–æ–º –∏–º–µ–Ω–∏
      const nameResult = await onboardingLogic.handleOnboardingMessage(nameCtx);
      expect(nameResult.success).toBe(true);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞: createKeyboard –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      expect(createKeyboard).not.toHaveBeenCalled();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å null –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      const { safeSendMessage } = require('../../utils/message-helpers');
      const calls = safeSendMessage.mock.calls;
      
      calls.forEach(call => {
        const keyboard = call[2]; // –¢—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        expect(keyboard).toBeNull();
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é /menu
      const lastCall = calls[calls.length - 1];
      const lastMessageText = lastCall[1];
      expect(lastMessageText).toContain('üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu');
    });
  });
});