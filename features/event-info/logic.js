/**
 * [RU] –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
 * [EN] Event information management logic
 */

const { EventInfoAPI } = require('./api');
const texts = require('../../bot/texts');
const { createInlineKeyboard, safeSendMessage, standardButtons } = require('../../utils/message-helpers');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö
 * [EN] Event information management logic class
 */
class EventInfoLogic {
  constructor(database) {
    this.database = database;
    this.api = new EventInfoAPI(database);
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ
   * [EN] Show detailed event information
   */
  async showEventDetails(ctx) {
    try {
      console.log(`üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è`);

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const eventInfo = await this.api.getEventDetails();
      
      let messageText = `${texts.eventDetails.title}\n\n`;
      
      if (eventInfo.success && eventInfo.details) {
        messageText += this.formatEventDetails(eventInfo.details);
      } else {
        messageText += texts.eventDetails.content;
      }

      const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);

      await safeSendMessage(ctx, messageText, keyboard, { parseMode: 'HTML' });
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è:', error.message);
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery(texts.errors.general);
      }
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * [EN] Show useful information
   */
  async showUsefulInfo(ctx) {
    try {
      console.log(`üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const usefulInfo = await this.api.getUsefulInfo();
      
      let messageText = `${texts.usefulInfo.title}\n\n`;
      
      if (usefulInfo.success && usefulInfo.info) {
        messageText += this.formatUsefulInfo(usefulInfo.info);
      } else {
        messageText += texts.usefulInfo.content;
      }

      const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);

      await safeSendMessage(ctx, messageText, keyboard, { parseMode: 'HTML' });
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error.message);
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery(texts.errors.general);
      }
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è
   * [EN] Format event details
   */
  formatEventDetails(details) {
    let formatted = '';

    if (details.name) {
      formatted += `<b>üéâ –°–æ–±—ã—Ç–∏–µ:</b> ${details.name}\n\n`;
    }

    if (details.date && details.time) {
      formatted += `<b>üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${details.date} –≤ ${details.time}\n\n`;
    }

    if (details.location) {
      formatted += `<b>üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> ${details.location}\n\n`;
    }

    if (details.address) {
      formatted += `<b>üè† –ê–¥—Ä–µ—Å:</b> ${details.address}\n\n`;
    }

    if (details.dressCode) {
      formatted += `<b>üëî –î—Ä–µ—Å—Å-–∫–æ–¥:</b> ${details.dressCode}\n\n`;
    }

    if (details.contact) {
      formatted += `<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> ${details.contact}\n\n`;
    }

    if (details.description) {
      formatted += `<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${details.description}\n\n`;
    }

    if (details.specialInstructions) {
      formatted += `<b>‚ö†Ô∏è –û—Å–æ–±—ã–µ —É–∫–∞–∑–∞–Ω–∏—è:</b>\n${details.specialInstructions}\n\n`;
    }

    return formatted.trim() || '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.';
  }

  /**
   * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * [EN] Format useful information
   */
  formatUsefulInfo(info) {
    let formatted = '';

    if (info.transport && info.transport.length > 0) {
      formatted += '<b>üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</b>\n';
      info.transport.forEach(item => {
        formatted += `‚Ä¢ ${item}\n`;
      });
      formatted += '\n';
    }

    if (info.parking) {
      formatted += `<b>üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–∫–∞:</b> ${info.parking}\n\n`;
    }

    if (info.accommodation && info.accommodation.length > 0) {
      formatted += '<b>üè® –†–∞–∑–º–µ—â–µ–Ω–∏–µ:</b>\n';
      info.accommodation.forEach(item => {
        formatted += `‚Ä¢ ${item}\n`;
      });
      formatted += '\n';
    }

    if (info.attractions && info.attractions.length > 0) {
      formatted += '<b>üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>\n';
      info.attractions.forEach(item => {
        formatted += `‚Ä¢ ${item}\n`;
      });
      formatted += '\n';
    }

    if (info.emergency) {
      formatted += `<b>üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b> ${info.emergency}\n\n`;
    }

    if (info.weather) {
      formatted += `<b>üå§Ô∏è –ü–æ–≥–æ–¥–∞:</b> ${info.weather}\n\n`;
    }

    if (info.additionalInfo && info.additionalInfo.length > 0) {
      formatted += '<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n';
      info.additionalInfo.forEach(item => {
        formatted += `‚Ä¢ ${item}\n`;
      });
    }

    return formatted.trim() || '–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.';
  }

  /**
   * [RU] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
   * [EN] Update event information
   */
  async updateEventDetails(details) {
    try {
      return await this.api.updateEventDetails(details);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * [EN] Update useful information
   */
  async updateUsefulInfo(info) {
    try {
      return await this.api.updateUsefulInfo(info);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error.message);
      return { success: false, error: error.message };
    }
  }
}

module.exports = {
  EventInfoLogic
};