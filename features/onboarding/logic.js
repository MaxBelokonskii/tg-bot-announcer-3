/**
 * [RU] –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –º–æ–¥—É–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * [EN] User onboarding business logic
 */

const texts = require('../../bot/texts');
const { formatUserName } = require('../../utils/format-utils');
const { logUserAction, safeSendMessage, createKeyboard } = require('../../utils/message-helpers');
const { OnboardingAPI } = require('./api');

/**
 * [RU] –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 * [EN] Main onboarding logic class
 */
class OnboardingLogic {
  constructor(database) {
    this.api = new OnboardingAPI(database);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    this.userStates = new Map();
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   * [EN] Handle /start command
   */
  async handleStartCommand(ctx) {
    try {
      const telegramId = ctx.from.id.toString();
      const userExists = await this.api.userExists(telegramId);

      logUserAction(ctx, 'start_command', { userExists });

      if (userExists) {
        return await this.handleExistingUser(ctx);
      } else {
        return await this.startOnboarding(ctx);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error.message);
      await safeSendMessage(
        ctx, 
        texts.errors.general,
        null,
        { parseMode: 'HTML' }
      );
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * [EN] Handle existing user
   */
  async handleExistingUser(ctx) {
    const telegramId = ctx.from.id.toString();
    const userResult = await this.api.getUser(telegramId);
    
    if (!userResult) {
      // –°—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      return await this.startOnboarding(ctx);
    }

    const welcomeText = texts.formatText(texts.welcome.alreadyRegistered, {
      name: userResult.full_name
    });

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    const keyboard = createKeyboard([
      'üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è',
      'üí¨ –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã',
      '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      '‚ùì –ü–æ–º–æ—â—å'
    ], { columns: 2 });

    await safeSendMessage(ctx, welcomeText, keyboard, { parseMode: 'HTML' });
    
    logUserAction(ctx, 'existing_user_welcomed', {
      userId: userResult.id,
      fullName: userResult.full_name
    });

    return { success: true, user: userResult, isNewUser: false };
  }

  /**
   * [RU] –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * [EN] Start onboarding process
   */
  async startOnboarding(ctx) {
    const telegramId = ctx.from.id.toString();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userStates.set(telegramId, {
      step: 'awaiting_name',
      startedAt: new Date()
    });

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage = `${texts.welcome.title}\n\n${texts.welcome.greeting}\n\n${texts.welcome.namePrompt}`;
    
    await safeSendMessage(ctx, welcomeMessage, null, { parseMode: 'HTML' });
    
    logUserAction(ctx, 'onboarding_started');

    return { success: true, step: 'awaiting_name' };
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * [EN] Handle messages during onboarding
   */
  async handleOnboardingMessage(ctx) {
    const telegramId = ctx.from.id.toString();
    const userState = this.userStates.get(telegramId);

    if (!userState) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞' };
    }

    switch (userState.step) {
      case 'awaiting_name':
        return await this.handleNameInput(ctx);
      default:
        return { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞' };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * [EN] Handle user name input
   */
  async handleNameInput(ctx) {
    const telegramId = ctx.from.id.toString();
    const userName = ctx.message?.text?.trim();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if (!userName || userName.length < 2) {
      await safeSendMessage(
        ctx, 
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):',
        null,
        { parseMode: 'HTML' }
      );
      return { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è' };
    }

    if (userName.length > 50) {
      await safeSendMessage(
        ctx, 
        '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–∫–æ—Ä–æ—á–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):',
        null,
        { parseMode: 'HTML' }
      );
      return { success: false, error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (userName.startsWith('/') || userName.includes('@')) {
      await safeSendMessage(
        ctx, 
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±—ã—á–Ω–æ–µ –∏–º—è –±–µ–∑ –∫–æ–º–∞–Ω–¥ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:',
        null,
        { parseMode: 'HTML' }
      );
      return { success: false, error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏' };
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const createResult = await this.api.createUser(telegramId, userName);
      
      if (!createResult.success) {
        await safeSendMessage(
          ctx, 
          texts.errors.database,
          null,
          { parseMode: 'HTML' }
        );
        return createResult;
      }

      // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      this.userStates.delete(telegramId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const confirmationText = texts.formatText(texts.welcome.nameConfirm, {
        name: userName
      });
      
      await safeSendMessage(ctx, confirmationText, null, { parseMode: 'HTML' });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
      await this.completeOnboarding(ctx, createResult.user);

      logUserAction(ctx, 'onboarding_completed', {
        userId: createResult.user.id,
        fullName: createResult.user.full_name
      });

      return { 
        success: true, 
        user: createResult.user, 
        isNewUser: true 
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      
      await safeSendMessage(
        ctx, 
        texts.errors.general,
        null,
        { parseMode: 'HTML' }
      );

      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * [EN] Complete onboarding process
   */
  async completeOnboarding(ctx, user) {
    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = createKeyboard([
      'üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è',
      'üí¨ –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã',
      '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      '‚ùì –ü–æ–º–æ—â—å'
    ], { columns: 2 });

    const completionText = `${texts.welcome.registrationComplete}\n\n${texts.menu.description}`;

    await safeSendMessage(ctx, completionText, keyboard, { parseMode: 'HTML' });
  }

  /**
   * [RU] –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * [EN] Check if user is in onboarding process
   */
  isUserOnboarding(telegramId) {
    return this.userStates.has(telegramId.toString());
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * [EN] Get user onboarding state
   */
  getUserOnboardingState(telegramId) {
    return this.userStates.get(telegramId.toString());
  }

  /**
   * [RU] –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * [EN] Cancel onboarding process
   */
  async cancelOnboarding(ctx) {
    const telegramId = ctx.from.id.toString();
    
    if (this.userStates.has(telegramId)) {
      this.userStates.delete(telegramId);
      
      await safeSendMessage(
        ctx, 
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start',
        null,
        { parseMode: 'HTML' }
      );

      logUserAction(ctx, 'onboarding_cancelled');
      
      return { success: true };
    }
    
    return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞' };
  }

  /**
   * [RU] –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
   * [EN] Clean up old onboarding states (called periodically)
   */
  cleanupOldStates() {
    const now = new Date();
    const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

    for (const [telegramId, state] of this.userStates.entries()) {
      if (now - state.startedAt > maxAge) {
        this.userStates.delete(telegramId);
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`);
      }
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * [EN] Get onboarding statistics
   */
  getOnboardingStats() {
    const activeOnboardings = this.userStates.size;
    const stateDetails = Array.from(this.userStates.entries()).map(([telegramId, state]) => ({
      telegramId,
      step: state.step,
      duration: new Date() - state.startedAt
    }));

    return {
      activeOnboardings,
      stateDetails
    };
  }
}

module.exports = {
  OnboardingLogic
};