/**
 * [RU] –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * [EN] Reminder scheduler business logic
 */

const cron = require('node-cron');
const { formatDate, getRelativeTime } = require('../../utils/date-utils');
const { ReminderSchedulerAPI } = require('./api');
const texts = require('../../bot/texts');

/**
 * [RU] –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * [EN] Main reminder scheduler logic class
 */
class ReminderSchedulerLogic {
  constructor(database, bot = null) {
    this.api = new ReminderSchedulerAPI(database);
    this.bot = bot;
    this.isRunning = false;
    this.cronJob = null;
    this.processingQueue = new Set();
  }

  /**
   * [RU] –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   * [EN] Start scheduler
   */
  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    this.cronJob = cron.schedule('*/1 * * * *', async () => {
      await this.processScheduledReminders();
    }, {
      scheduled: false
    });

    this.cronJob.start();
    this.isRunning = true;
    
    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * [RU] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   * [EN] Stop scheduler
   */
  stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    if (this.cronJob) {
      this.cronJob.stop();
      this.cronJob = null;
    }

    this.isRunning = false;
    console.log('üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * [EN] Process scheduled reminders
   */
  async processScheduledReminders() {
    if (!this.bot) {
      console.log('‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
      return;
    }

    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
      
      const dueResult = await this.api.getDueReminders();
      
      if (!dueResult.success) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', dueResult.error);
        return;
      }

      const dueReminders = dueResult.reminders;
      
      if (dueReminders.length === 0) {
        console.log('‚úÖ –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
        return;
      }

      console.log(`üì® –ù–∞–π–¥–µ–Ω–æ ${dueReminders.length} –≥–æ—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      for (const reminder of dueReminders) {
        if (this.processingQueue.has(reminder.id)) {
          console.log(`‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è`);
          continue;
        }

        this.processingQueue.add(reminder.id);
        
        try {
          await this.processReminder(reminder);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder.id}:`, error.message);
        } finally {
          this.processingQueue.delete(reminder.id);
        }
      }
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:', error.message);
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * [EN] Process individual reminder
   */
  async processReminder(reminder) {
    console.log(`üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.id}: ${reminder.message_text.substring(0, 50)}...`);

    try {
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ
      await this.api.updateReminderStatus(reminder.id, 'sent');

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –º–æ–¥—É–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);

      return {
        success: true,
        reminderId: reminder.id
      };
    } catch (error) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–µ
      await this.api.updateReminderStatus(reminder.id, 'failed');
      
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.id}:`, error.message);
      
      return {
        success: false,
        reminderId: reminder.id,
        error: error.message
      };
    }
  }

  /**
   * [RU] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
   * [EN] Create new event with reminders
   */
  async createEvent(eventText, eventDate, reminderOptions = {}) {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
      if (!eventText || eventText.trim().length === 0) {
        throw new Error('–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      if (new Date(eventDate) <= new Date()) {
        throw new Error('–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
      }

      // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const result = await this.api.createEventReminderSeries(
        eventText, 
        eventDate, 
        reminderOptions
      );

      if (!result.success) {
        throw new Error(result.error);
      }

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å ${result.reminders.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏`);

      return {
        success: true,
        event: {
          text: eventText,
          date: eventDate
        },
        reminders: result.reminders,
        message: `–°–æ–±—ã—Ç–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${formatDate(eventDate, { includeTime: true })}`
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
   * [EN] Get upcoming events
   */
  async getUpcomingEvents(limit = 10) {
    try {
      const result = await this.api.getReminders({
        status: 'pending',
        fromDate: new Date(),
        limit
      });

      if (!result.success) {
        throw new Error(result.error);
      }

      const events = result.reminders.map(reminder => ({
        id: reminder.id,
        text: reminder.message_text,
        date: reminder.send_date,
        formattedDate: formatDate(reminder.send_date, { includeTime: true }),
        relativeTime: getRelativeTime(reminder.send_date),
        status: reminder.status
      }));

      return {
        success: true,
        events,
        count: events.length
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π:', error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * [RU] –û—Ç–º–µ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * [EN] Cancel reminder
   */
  async cancelReminder(reminderId, reason = 'User cancellation') {
    try {
      const result = await this.api.updateReminderStatus(reminderId, 'cancelled');
      
      if (!result.success) {
        throw new Error(result.error);
      }

      console.log(`üö´ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –æ—Ç–º–µ–Ω–µ–Ω–æ: ${reason}`);

      return {
        success: true,
        reminderId,
        message: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminderId}:`, error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * [RU] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * [EN] Edit reminder
   */
  async editReminder(reminderId, newText, newDate = null) {
    try {
      // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ
      const oldReminderResult = await this.api.deleteReminder(reminderId, 'Edited by user');
      
      if (!oldReminderResult.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      const createResult = await this.api.createReminder(
        newText, 
        newDate || oldReminderResult.deletedReminder.send_date
      );

      if (!createResult.success) {
        throw new Error(createResult.error);
      }

      console.log(`‚úèÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (–Ω–æ–≤—ã–π ID: ${createResult.reminderId})`);

      return {
        success: true,
        oldId: reminderId,
        newId: createResult.reminderId,
        message: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminderId}:`, error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   * [EN] Get scheduler statistics
   */
  async getStats() {
    try {
      const result = await this.api.getSchedulerStats();
      
      if (!result.success) {
        throw new Error(result.error);
      }

      const stats = {
        ...result.stats,
        isRunning: this.isRunning,
        processingQueue: this.processingQueue.size
      };

      return {
        success: true,
        stats
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * [RU] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * [EN] Set bot for message sending
   */
  setBot(bot) {
    this.bot = bot;
    console.log('ü§ñ –ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
  }

  /**
   * [RU] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   * [EN] Check scheduler status
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      processingQueue: this.processingQueue.size,
      hasCronJob: !!this.cronJob,
      hasBot: !!this.bot
    };
  }
}

module.exports = {
  ReminderSchedulerLogic
};