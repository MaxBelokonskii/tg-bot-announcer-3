/**
 * [RU] API –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –≥–æ—Å—Ç–µ–π
 * [EN] Administration and guest list management API
 */

const { DatabaseUtils } = require('../../utils/db-utils');

/**
 * [RU] –ö–ª–∞—Å—Å API –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
 * [EN] Administration API class
 */
class AdminAPI extends DatabaseUtils {
  constructor(database) {
    super(database);
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Get all users with their attendance statuses
   */
  async getAllUsersWithAttendance() {
    try {
      const query = `
        SELECT 
          id,
          telegram_id,
          full_name,
          attendance_status,
          attendance_updated_at,
          created_at
        FROM users 
        ORDER BY attendance_status, full_name
      `;

      const users = this.getMany(query);
      
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      return { success: true, users };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * [EN] Get user statistics
   */
  async getUserStatistics() {
    try {
      const totalQuery = `SELECT COUNT(*) as total FROM users`;
      const totalResult = this.getOne(totalQuery);
      
      const recentQuery = `
        SELECT COUNT(*) as recent 
        FROM users 
        WHERE created_at >= datetime('now', '-30 days')
      `;
      const recentResult = this.getOne(recentQuery);

      const stats = {
        total: totalResult.total || 0,
        recent: recentResult.recent || 0
      };

      return { success: true, stats };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Get attendance statistics
   */
  async getAttendanceStatistics() {
    try {
      const query = `
        SELECT 
          attendance_status,
          COUNT(*) as count
        FROM users 
        GROUP BY attendance_status
      `;

      const results = this.getMany(query);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const stats = {
        attending: 0,
        not_attending: 0,
        maybe: 0,
        total: 0
      };

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      results.forEach(row => {
        const status = row.attendance_status || 'attending';
        if (stats.hasOwnProperty(status)) {
          stats[status] = row.count;
        }
        stats.total += row.count;
      });

      return { success: true, stats };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Get users by attendance status
   */
  async getUsersByAttendanceStatus(status) {
    try {
      const validStatuses = ['attending', 'not_attending', 'maybe'];
      if (!validStatuses.includes(status)) {
        throw new Error(`Invalid attendance status: ${status}`);
      }

      const query = `
        SELECT 
          id,
          telegram_id,
          full_name,
          attendance_updated_at,
          created_at
        FROM users 
        WHERE attendance_status = ?
        ORDER BY full_name
      `;

      const users = await this.database.all(query, [status]);
      
      return { success: true, users, status, count: users.length };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${status}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * [EN] Get detailed user information
   */
  async getUserDetails(userId) {
    try {
      const userQuery = `
        SELECT 
          id,
          telegram_id,
          full_name,
          attendance_status,
          attendance_updated_at,
          created_at,
          updated_at
        FROM users 
        WHERE telegram_id = ?
      `;

      const user = await this.database.get(userQuery, [userId]);
      
      if (!user) {
        return { success: false, error: 'User not found' };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const responsesQuery = `
        SELECT COUNT(*) as response_count 
        FROM user_responses 
        WHERE user_id = ?
      `;
      
      const responsesResult = await this.database.get(responsesQuery, [user.id]);
      
      user.response_count = responsesResult.response_count || 0;

      return { success: true, user };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
   * [EN] Get user activity for period
   */
  async getUserActivity(days = 30) {
    try {
      const query = `
        SELECT 
          DATE(created_at) as date,
          COUNT(*) as registrations
        FROM users 
        WHERE created_at >= datetime('now', '-${days} days')
        GROUP BY DATE(created_at)
        ORDER BY date DESC
      `;

      const activity = await this.database.all(query);
      
      return { success: true, activity, period: days };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏
   * [EN] Search users by name
   */
  async searchUsersByName(searchTerm) {
    try {
      const query = `
        SELECT 
          id,
          telegram_id,
          full_name,
          attendance_status,
          created_at
        FROM users 
        WHERE full_name LIKE ?
        ORDER BY full_name
        LIMIT 50
      `;

      const users = await this.database.all(query, [`%${searchTerm}%`]);
      
      return { success: true, users, searchTerm, count: users.length };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   * [EN] Update attendance status by admin
   */
  async adminUpdateUserAttendance(targetUserId, status, adminUserId) {
    try {
      const validStatuses = ['attending', 'not_attending', 'maybe'];
      if (!validStatuses.includes(status)) {
        throw new Error(`Invalid attendance status: ${status}`);
      }

      const query = `
        UPDATE users 
        SET attendance_status = ?, 
            attendance_updated_at = CURRENT_TIMESTAMP 
        WHERE telegram_id = ?
      `;

      const result = await this.database.run(query, [status, targetUserId]);
      
      if (result.changes === 0) {
        throw new Error(`User ${targetUserId} not found`);
      }

      console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${adminUserId} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –Ω–∞: ${status}`);
      
      return { 
        success: true, 
        status,
        targetUserId,
        adminUserId,
        updated_at: new Date().toISOString() 
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Get attendance status change logs
   */
  async getAttendanceChangeLogs(limit = 100) {
    try {
      // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–æ–≤
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
      const query = `
        SELECT 
          telegram_id,
          full_name,
          attendance_status,
          attendance_updated_at
        FROM users 
        WHERE attendance_updated_at IS NOT NULL
        ORDER BY attendance_updated_at DESC
        LIMIT ?
      `;

      const logs = await this.database.all(query, [limit]);
      
      return { success: true, logs, count: logs.length };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   * [EN] Get overall system statistics
   */
  async getSystemStatistics() {
    try {
      const userStats = await this.getUserStatistics();
      const attendanceStats = await this.getAttendanceStatistics();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–≤–µ—Ç–æ–≤
      const responsesQuery = `SELECT COUNT(*) as total FROM user_responses`;
      const responsesResult = await this.database.get(responsesQuery);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
      const messagesQuery = `SELECT COUNT(*) as total FROM scheduled_messages`;
      const messagesResult = await this.database.get(messagesQuery);

      const systemStats = {
        users: userStats.success ? userStats.stats : { total: 0, recent: 0 },
        attendance: attendanceStats.success ? attendanceStats.stats : { attending: 0, not_attending: 0, maybe: 0, total: 0 },
        responses: responsesResult.total || 0,
        messages: messagesResult.total || 0,
        timestamp: new Date().toISOString()
      };

      return { success: true, stats: systemStats };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      return { success: false, error: error.message };
    }
  }
}

module.exports = {
  AdminAPI
};