/**
 * [RU] –õ–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –≥–æ—Å—Ç–µ–π
 * [EN] Administration and guest list management logic
 */

const { AdminAPI } = require('./api');
const texts = require('../../bot/texts');
const { createInlineKeyboard, safeSendMessage, standardButtons } = require('../../utils/message-helpers');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
 * [EN] Administration management logic class
 */
class AdminLogic {
  constructor(database) {
    this.database = database;
    this.api = new AdminAPI(database);
  }

  /**
   * [RU] –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   * [EN] Check if user is admin
   */
  isAdmin(userId) {
    const adminId = process.env.ADMIN_ID;
    const adminIds = process.env.ADMIN_IDS?.split(',') || [];
    
    return userId === adminId || adminIds.includes(userId.toString());
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
   * [EN] Show guest list (admin only)
   */
  async showGuestList(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!this.isAdmin(userId)) {
        await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        await safeSendMessage(ctx, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return { success: false, error: 'Unauthorized' };
      }

      console.log(`üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π`);

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      const result = await this.api.getAllUsersWithAttendance();
      
      if (!result.success) {
        throw new Error(result.error);
      }

      const { users } = result;
      
      if (!users || users.length === 0) {
        const messageText = `${texts.admin.guestList.title}\n\n${texts.admin.guestList.noGuests}`;
        const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);
        
        await safeSendMessage(ctx, messageText, keyboard);
        
        if (ctx.callbackQuery) {
          await ctx.answerCbQuery();
        }
        
        return { success: true, userCount: 0 };
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      const grouped = this.groupUsersByAttendance(users);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageText = this.formatGuestListMessage(grouped);
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const actionButtons = [
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback: 'admin_refresh_guest_list' },
        standardButtons.mainMenu
      ];
      
      const keyboard = createInlineKeyboard(actionButtons, 1);

      await safeSendMessage(ctx, messageText, keyboard, { parseMode: 'HTML' });
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return { success: true, userCount: users.length };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π:', error.message);
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery(texts.admin.guestList.loadError);
      }
      
      await safeSendMessage(ctx, texts.admin.guestList.loadError);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Group users by attendance status
   */
  groupUsersByAttendance(users) {
    const grouped = {
      attending: [],
      not_attending: [],
      maybe: []
    };

    users.forEach(user => {
      const status = user.attendance_status || 'attending';
      if (grouped[status]) {
        grouped[status].push(user);
      } else {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–º–µ—â–∞–µ–º –≤ "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        grouped.attending.push(user);
      }
    });

    return grouped;
  }

  /**
   * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ—Å—Ç–µ–π
   * [EN] Format guest list message
   */
  formatGuestListMessage(grouped) {
    const totalCount = grouped.attending.length + grouped.not_attending.length + grouped.maybe.length;
    
    let message = `${texts.admin.guestList.title}\n\n`;
    message += `${texts.admin.guestList.total.replace('{count}', totalCount)}\n\n`;

    // –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (grouped.attending.length > 0) {
      message += `${texts.admin.guestList.attending.replace('{count}', grouped.attending.length)}\n`;
      grouped.attending.forEach(user => {
        message += `‚Ä¢ ${user.full_name}\n`;
      });
      message += '\n';
    }

    // –ù–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (grouped.not_attending.length > 0) {
      message += `${texts.admin.guestList.notAttending.replace('{count}', grouped.not_attending.length)}\n`;
      grouped.not_attending.forEach(user => {
        message += `‚Ä¢ ${user.full_name}\n`;
      });
      message += '\n';
    }

    // –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (grouped.maybe.length > 0) {
      message += `${texts.admin.guestList.maybe.replace('{count}', grouped.maybe.length)}\n`;
      grouped.maybe.forEach(user => {
        message += `‚Ä¢ ${user.full_name}\n`;
      });
      message += '\n';
    }

    return message.trim();
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   * [EN] Get admin statistics
   */
  async getAdminStats() {
    try {
      const userStats = await this.api.getUserStatistics();
      const attendanceStats = await this.api.getAttendanceStatistics();
      
      return {
        success: true,
        stats: {
          users: userStats.success ? userStats.stats : null,
          attendance: attendanceStats.success ? attendanceStats.stats : null
        }
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è callback
   * [EN] Validate admin rights for callback
   */
  async validateAdminCallback(ctx, callback) {
    const userId = ctx.from.id.toString();
    
    if (callback.startsWith('admin_') && !this.isAdmin(userId)) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      throw new Error('Unauthorized admin action attempt');
    }
    
    return true;
  }

  /**
   * [RU] –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è)
   * [EN] Export guest list (for future development)
   */
  async exportGuestList(format = 'text') {
    try {
      const result = await this.api.getAllUsersWithAttendance();
      
      if (!result.success) {
        return result;
      }

      const { users } = result;
      
      if (format === 'csv') {
        return this.exportToCsv(users);
      } else {
        return this.exportToText(users);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç
   * [EN] Export to CSV format
   */
  exportToCsv(users) {
    try {
      let csv = '–ò–º—è,–°—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è,–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n';
      
      users.forEach(user => {
        const status = this.getStatusDisplayText(user.attendance_status);
        const updatedAt = user.attendance_updated_at || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        csv += `"${user.full_name}","${status}","${updatedAt}"\n`;
      });

      return { success: true, format: 'csv', data: csv };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
   * [EN] Export to text format
   */
  exportToText(users) {
    try {
      const grouped = this.groupUsersByAttendance(users);
      const messageText = this.formatGuestListMessage(grouped);

      return { success: true, format: 'text', data: messageText };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
   * [EN] Get display text for status
   */
  getStatusDisplayText(status) {
    switch (status) {
      case 'attending':
        return '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      case 'not_attending':
        return '–ù–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      case 'maybe':
        return '–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      default:
        return '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    }
  }
}

module.exports = {
  AdminLogic
};