/**
 * [RU] –õ–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –≥–æ—Å—Ç–µ–π
 * [EN] Administration and guest list management logic
 */

const { AdminAPI } = require('./api');
const texts = require('../../bot/texts');
const { createInlineKeyboard, safeSendMessage, standardButtons } = require('../../utils/message-helpers');
const { isEnhancedBroadcastEnabled } = require('../../config/enhanced-admin');
const { formatEnhancedDeliveryStats } = require('../../utils/format-utils');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
 * [EN] Administration management logic class
 */
class AdminLogic {
  constructor(database) {
    this.database = database;
    this.api = new AdminAPI(database);
  }

  /**
   * [RU] –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   * [EN] Check if user is admin
   */
  isAdmin(userId) {
    const adminId = process.env.ADMIN_ID;
    const adminIds = process.env.ADMIN_IDS?.split(',') || [];
    
    return userId === adminId || adminIds.includes(userId.toString());
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
   * [EN] Show guest list (admin only)
   */
  async showGuestList(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!this.isAdmin(userId)) {
        await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        await safeSendMessage(ctx, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return { success: false, error: 'Unauthorized' };
      }

      console.log(`üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π`);

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      const result = await this.api.getAllUsersWithAttendance();
      
      if (!result.success) {
        throw new Error(result.error);
      }

      const { users } = result;
      
      if (!users || users.length === 0) {
        const messageText = `${texts.admin.guestList.title}\n\n${texts.admin.guestList.noGuests}`;
        const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);
        
        await safeSendMessage(ctx, messageText, keyboard);
        
        if (ctx.callbackQuery) {
          await ctx.answerCbQuery();
        }
        
        return { success: true, userCount: 0 };
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      const grouped = this.groupUsersByAttendance(users);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageText = this.formatGuestListMessage(grouped);
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const actionButtons = [
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback: 'admin_refresh_guest_list' },
        standardButtons.mainMenu
      ];
      
      const keyboard = createInlineKeyboard(actionButtons, 1);

      await safeSendMessage(ctx, messageText, keyboard, { parseMode: 'HTML' });
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return { success: true, userCount: users.length };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π:', error.message);
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery(texts.admin.guestList.loadError);
      }
      
      await safeSendMessage(ctx, texts.admin.guestList.loadError);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Group users by attendance status
   */
  groupUsersByAttendance(users) {
    const grouped = {
      attending: [],
      not_attending: [],
      maybe: []
    };

    users.forEach(user => {
      const status = user.attendance_status || 'attending';
      if (grouped[status]) {
        grouped[status].push(user);
      } else {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–º–µ—â–∞–µ–º –≤ "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        grouped.attending.push(user);
      }
    });

    return grouped;
  }

  /**
   * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ—Å—Ç–µ–π
   * [EN] Format guest list message
   */
  formatGuestListMessage(grouped) {
    const totalCount = grouped.attending.length + grouped.not_attending.length + grouped.maybe.length;
    
    let message = `${texts.admin.guestList.title}\n\n`;
    message += `${texts.admin.guestList.total.replace('{count}', totalCount)}\n\n`;

    // –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (grouped.attending.length > 0) {
      message += `${texts.admin.guestList.attending.replace('{count}', grouped.attending.length)}\n`;
      grouped.attending.forEach(user => {
        message += `‚Ä¢ ${user.full_name}\n`;
      });
      message += '\n';
    }

    // –ù–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (grouped.not_attending.length > 0) {
      message += `${texts.admin.guestList.notAttending.replace('{count}', grouped.not_attending.length)}\n`;
      grouped.not_attending.forEach(user => {
        message += `‚Ä¢ ${user.full_name}\n`;
      });
      message += '\n';
    }

    // –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (grouped.maybe.length > 0) {
      message += `${texts.admin.guestList.maybe.replace('{count}', grouped.maybe.length)}\n`;
      grouped.maybe.forEach(user => {
        message += `‚Ä¢ ${user.full_name}\n`;
      });
      message += '\n';
    }

    return message.trim();
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   * [EN] Get admin statistics
   */
  async getAdminStats() {
    try {
      const userStats = await this.api.getUserStatistics();
      const attendanceStats = await this.api.getAttendanceStatistics();
      
      return {
        success: true,
        stats: {
          users: userStats.success ? userStats.stats : null,
          attendance: attendanceStats.success ? attendanceStats.stats : null
        }
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * [EN] Handle admin message command or callback
   */
  async handleAdminMessage(ctx, bot) {
    const userId = ctx.from.id.toString();
    
    console.log(`üîç [DEBUG] handleAdminMessage: userId=${userId}, isAdmin=${this.isAdmin(userId)}, command=${ctx.message?.text || ctx.callbackQuery?.data}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!this.isAdmin(userId)) {
        console.log(`‚ö†Ô∏è [DEBUG] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        
        if (ctx.callbackQuery) {
          await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        }
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return { success: false, error: 'Unauthorized' };
      }

      console.log(`üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userId} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞–Ω–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π`);

      return await this.showMessageSendingPanel(ctx, bot);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery(texts.admin.message.error.replace('{error}', '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã'));
      }
      
      await ctx.reply(texts.admin.message.error.replace('{error}', '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã'));
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
   * [EN] Show message sending panel with confirmation
   */
  async showMessageSendingPanel(ctx, bot) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResult = await this.api.getUserStatistics();
      if (!usersResult.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      const userCount = usersResult.stats.total;
      const testMessage = texts.admin.message.testMessage;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
      const enhancedEnabled = isEnhancedBroadcastEnabled();
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
      let confirmButtons;
      
      if (enhancedEnabled) {
        // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        const modeSelectionText = `üìß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n` +
          `üìä <b>–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${userCount}\n` +
          `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${testMessage}\n\n` +
          `üîπ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:</b> –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n` +
          `üî∏ <b>–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:</b> –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é`;
        
        confirmButtons = [
          { text: 'üì® –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data: 'admin_confirm_standard' },
          { text: 'üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data: 'admin_confirm_enhanced' },
          { text: texts.admin.message.buttons.cancel, callback_data: 'admin_cancel_send' },
          standardButtons.mainMenu
        ];
        
        const keyboard = createInlineKeyboard(confirmButtons, 1);
        await ctx.reply(modeSelectionText, {
          parse_mode: 'HTML',
          reply_markup: keyboard.reply_markup
        });
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å
        const confirmText = texts.admin.message.confirmPanel
          .replace('{message}', testMessage)
          .replace('{count}', userCount);

        confirmButtons = [
          { text: texts.admin.message.buttons.confirm, callback_data: 'admin_confirm_send' },
          { text: texts.admin.message.buttons.cancel, callback_data: 'admin_cancel_send' },
          standardButtons.mainMenu
        ];
        
        const keyboard = createInlineKeyboard(confirmButtons, 1);
        await ctx.reply(confirmText, {
          parse_mode: 'HTML',
          reply_markup: keyboard.reply_markup
        });
      }
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return { success: true, userCount, enhancedAvailable: enhancedEnabled };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–∞–Ω–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery(texts.admin.message.error.replace('{error}', error.message));
      }
      
      await ctx.reply(texts.admin.message.error.replace('{error}', error.message));
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)
   * [EN] Confirm message sending (standard broadcast)
   */
  async confirmMessageSending(ctx, bot) {
    return await this.processMessageSending(ctx, bot, 'standard');
  }

  /**
   * [RU] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
   * [EN] Confirm standard broadcast
   */
  async confirmStandardBroadcast(ctx, bot) {
    return await this.processMessageSending(ctx, bot, 'standard');
  }

  /**
   * [RU] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
   * [EN] Confirm enhanced broadcast
   */
  async confirmEnhancedBroadcast(ctx, bot) {
    return await this.processMessageSending(ctx, bot, 'enhanced');
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * [EN] Process message sending
   */
  async processMessageSending(ctx, bot, mode = 'standard') {
    const userId = ctx.from.id.toString();
    
    console.log(`üîç [DEBUG] processMessageSending: userId=${userId}, mode=${mode}, isAdmin=${this.isAdmin(userId)}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!this.isAdmin(userId)) {
        console.log(`‚ö†Ô∏è [DEBUG] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏`);
        await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        return { success: false, error: 'Unauthorized' };
      }

      console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É (—Ä–µ–∂–∏–º: ${mode})`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      const startingText = mode === 'enhanced' 
        ? `üöÄ <b>–ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/...\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: 0\n–û—à–∏–±–æ–∫: 0`
        : texts.admin.message.sending
          .replace('{completed}', '0')
          .replace('{total}', '...')
          .replace('{delivered}', '0')
          .replace('{failed}', '0');

      console.log(`üîç [DEBUG] –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏`);
      const processingMessage = await ctx.editMessageText(startingText, { parse_mode: 'HTML' });
      await ctx.answerCbQuery();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log(`üîç [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ AdminAPI (${mode} mode)`);
      
      let result;
      if (mode === 'enhanced') {
        result = await this.api.sendEnhancedBroadcast(bot, userId, {
          messageText: texts.admin.message.testMessage
        });
      } else {
        result = await this.api.sendTestMessage(bot, userId);
      }
      
      console.log(`üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ (${mode}):`, {
        success: result.success,
        messageId: result.messageId,
        stats: mode === 'enhanced' ? result.enhancedStats : result.deliveryStats,
        error: result.error
      });

      if (result.success) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        let completedText;
        
        if (mode === 'enhanced') {
          const stats = result.enhancedStats;
          completedText = `üéâ <b>–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
            `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
            `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\n` +
            `‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: ${stats.eligibleForEnhanced}\n` +
            `üì® –û—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${stats.standardDelivered}\n\n` +
            `üöÄ <b>–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n` +
            `üéØ –ü–æ–ª–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${stats.enhancedSequenceCompleted}\n` +
            `üí° –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${stats.usefulInfoDelivered}\n` +
            `üìÖ –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è: ${stats.eventDetailsDelivered}\n` +
            `üîÑ –ú–µ–Ω—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${stats.menuTriggered}\n` +
            `‚ùå –û—à–∏–±–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${stats.sequenceFailures}\n\n` +
            `üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> ${stats.completionRate?.toFixed(1) || 0}%\n` +
            `‚è±Ô∏è <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${result.duration}`;
        } else {
          const stats = result.deliveryStats;
          completedText = texts.admin.message.completed
            .replace('{total}', stats.total)
            .replace('{delivered}', stats.delivered)
            .replace('{failed}', stats.failed)
            .replace('{blocked}', stats.blocked)
            .replace('{duration}', result.duration);
        }

        // –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        const finalButtons = [
          { text: texts.admin.message.buttons.history, callback_data: 'admin_message_history' },
          standardButtons.mainMenu
        ];
        
        const finalKeyboard = createInlineKeyboard(finalButtons, 1);

        await ctx.editMessageText(completedText, {
          parse_mode: 'HTML',
          reply_markup: finalKeyboard.reply_markup
        });
      } else {
        const errorText = texts.admin.message.error.replace('{error}', result.error);
        
        const errorButtons = [
          { text: texts.admin.message.buttons.backToMenu, callback_data: 'main_menu' }
        ];
        
        const errorKeyboard = createInlineKeyboard(errorButtons, 1);

        await ctx.editMessageText(errorText, {
          parse_mode: 'HTML',
          reply_markup: errorKeyboard.reply_markup
        });
      }

      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
      console.error('‚ùå [DEBUG] Stack trace:', error.stack);
      
      await ctx.answerCbQuery(texts.admin.message.error.replace('{error}', error.message));
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * [EN] Cancel message sending
   */
  async cancelMessageSending(ctx) {
    try {
      const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);
      
      await ctx.editMessageText(texts.admin.message.cancelled, {
        parse_mode: 'HTML',
        reply_markup: keyboard.reply_markup
      });
      
      await ctx.answerCbQuery();
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
      
      await ctx.answerCbQuery(texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è callback
   * [EN] Validate admin rights for callback
   */
  async validateAdminCallback(ctx, callback) {
    const userId = ctx.from.id.toString();
    
    if (callback.startsWith('admin_') && !this.isAdmin(userId)) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      throw new Error('Unauthorized admin action attempt');
    }
    
    return true;
  }

  /**
   * [RU] –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è)
   * [EN] Export guest list (for future development)
   */
  async exportGuestList(format = 'text') {
    try {
      const result = await this.api.getAllUsersWithAttendance();
      
      if (!result.success) {
        return result;
      }

      const { users } = result;
      
      if (format === 'csv') {
        return this.exportToCsv(users);
      } else {
        return this.exportToText(users);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç
   * [EN] Export to CSV format
   */
  exportToCsv(users) {
    try {
      let csv = '–ò–º—è,–°—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è,–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n';
      
      users.forEach(user => {
        const status = this.getStatusDisplayText(user.attendance_status);
        const updatedAt = user.attendance_updated_at || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        csv += `"${user.full_name}","${status}","${updatedAt}"\n`;
      });

      return { success: true, format: 'csv', data: csv };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
   * [EN] Export to text format
   */
  exportToText(users) {
    try {
      const grouped = this.groupUsersByAttendance(users);
      const messageText = this.formatGuestListMessage(grouped);

      return { success: true, format: 'text', data: messageText };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
   * [EN] Get display text for status
   */
  getStatusDisplayText(status) {
    switch (status) {
      case 'attending':
        return '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      case 'not_attending':
        return '–ù–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      case 'maybe':
        return '–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      default:
        return '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    }
  }
}

module.exports = {
  AdminLogic
};