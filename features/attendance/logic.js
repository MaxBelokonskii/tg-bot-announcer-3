/**
 * [RU] –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * [EN] User attendance management logic
 */

const { AttendanceAPI } = require('./api');
const texts = require('../../bot/texts');
const { createInlineKeyboard, safeSendMessage, standardButtons } = require('../../utils/message-helpers');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
 * [EN] Attendance management logic class
 */
class AttendanceLogic {
  constructor(database) {
    this.database = database;
    this.api = new AttendanceAPI(database);
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Handle attendance status change
   */
  async handleAttendanceChange(ctx, userId) {
    try {
      console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è`);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const currentStatus = await this.api.getUserAttendance(userId);
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
      const statusButtons = [
        { text: texts.attendance.options.attending, callback_data: 'attendance_attending' },
        { text: texts.attendance.options.notAttending, callback_data: 'attendance_not_attending' },
        { text: texts.attendance.options.maybe, callback_data: 'attendance_maybe' }
      ];

      statusButtons.push(standardButtons.mainMenu);

      const keyboard = createInlineKeyboard(statusButtons, 1);

      const currentStatusText = this.getStatusDisplayText(currentStatus);
      const messageText = `${texts.attendance.title}\n\n${texts.attendance.currentStatus.replace('{status}', currentStatusText)}\n\n${texts.attendance.changePrompt}`;

      await safeSendMessage(ctx, messageText, keyboard);
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è:', error.message);
      
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery(texts.errors.general);
      }
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Handle attendance status selection
   */
  async handleAttendanceStatusSelect(ctx, userId, status) {
    try {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å: ${status}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const result = await this.api.updateUserAttendance(userId, status);
      
      if (!result.success) {
        throw new Error(result.error);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      const statusText = this.getStatusDisplayText(status);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const confirmationText = texts.attendance.confirmChange.replace('{status}', statusText);
      const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);

      await safeSendMessage(ctx, confirmationText, keyboard);
      await ctx.answerCbQuery('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');

      return { success: true, status };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è:', error.message);
      
      await ctx.answerCbQuery(texts.errors.general);
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
   * [EN] Get display text for status
   */
  getStatusDisplayText(status) {
    switch (status) {
      case 'attending':
        return texts.attendance.options.attending;
      case 'not_attending':
        return texts.attendance.options.notAttending;
      case 'maybe':
        return texts.attendance.options.maybe;
      default:
        return texts.attendance.options.attending;
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Get attendance statistics
   */
  async getAttendanceStats() {
    try {
      return await this.api.getAttendanceStatistics();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Validate attendance status
   */
  isValidAttendanceStatus(status) {
    const validStatuses = ['attending', 'not_attending', 'maybe'];
    return validStatuses.includes(status);
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
   * [EN] Get all users with their attendance statuses
   */
  async getAllUsersAttendance() {
    try {
      return await this.api.getAllUsersAttendance();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º:', error.message);
      return { success: false, error: error.message };
    }
  }
}

module.exports = {
  AttendanceLogic
};