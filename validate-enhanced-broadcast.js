#!/usr/bin/env node

/**
 * [RU] –°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
 * [EN] Enhanced admin broadcast validation script
 */

const path = require('path');
const Database = require('better-sqlite3');
const { AdminAPI } = require('./features/admin/api');
const { AdminLogic } = require('./features/admin/logic');
const { MessageSequenceProcessor } = require('./utils/message-sequence-processor');
const { UserDataValidator } = require('./utils/user-data-validator');
const { isEnhancedBroadcastEnabled, printConfig, validateConfig } = require('./config/enhanced-admin');
const { checkMigrationStatus } = require('./database/migrate-enhanced-delivery-logs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

const log = {
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è ${msg}${colors.reset}`),
  header: (msg) => console.log(`${colors.bold}${colors.cyan}üîß ${msg}${colors.reset}`),
  step: (msg) => console.log(`${colors.magenta}üìã ${msg}${colors.reset}`)
};

/**
 * [RU] –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * [EN] Creates a mock bot object for testing
 */
function createMockBot() {
  return {
    telegram: {
      sendMessage: async (chatId, text, options) => {
        console.log(`  üì§ Mock –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${chatId}: ${text.substring(0, 50)}...`);
        return Promise.resolve({ message_id: Math.floor(Math.random() * 1000) });
      },
      getMe: async () => {
        return Promise.resolve({
          id: 12345,
          is_bot: true,
          first_name: 'Test Bot',
          username: 'validation_bot'
        });
      }
    }
  };
}

/**
 * [RU] –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * [EN] Checks database status
 */
async function validateDatabase() {
  log.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  const dbPath = process.env.DATABASE_PATH || './database/bot_database.db';
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const db = new Database(dbPath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tables = db.prepare(`
      SELECT name FROM sqlite_master 
      WHERE type='table' AND name IN ('users', 'admin_messages')
    `).all();
    
    if (tables.length < 2) {
      log.error('–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
      return false;
    }
    
    log.success('–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é enhanced_delivery_logs
    const migrationStatus = checkMigrationStatus(dbPath);
    
    if (!migrationStatus.migrated) {
      log.error(`–ú–∏–≥—Ä–∞—Ü–∏—è enhanced_delivery_logs –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${migrationStatus.reason}`);
      return false;
    }
    
    log.success(`–ú–∏–≥—Ä–∞—Ü–∏—è enhanced_delivery_logs –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Å—Ç–æ–ª–±—Ü–æ–≤: ${migrationStatus.tableColumns}, –∏–Ω–¥–µ–∫—Å–æ–≤: ${migrationStatus.indexCount})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ admin_messages
    const adminTableInfo = db.prepare('PRAGMA table_info(admin_messages)').all();
    const hasEnhancedFields = adminTableInfo.some(col => col.name === 'enhanced_mode');
    
    if (!hasEnhancedFields) {
      log.error('–ü–æ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ admin_messages');
      return false;
    }
    
    log.success('–ü–æ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ admin_messages');
    
    db.close();
    return true;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    return false;
  }
}

/**
 * [RU] –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 * [EN] Validates configuration
 */
function validateConfiguration() {
  log.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  const enhancedEnabled = isEnhancedBroadcastEnabled();
  
  if (!enhancedEnabled) {
    log.warning('–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ENHANCED_BROADCAST_ENABLED –≤ .env');
    return false;
  }
  
  log.success('–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const configValidation = validateConfig();
  
  if (!configValidation.valid) {
    log.error('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:');
    configValidation.errors.forEach(error => {
      console.log(`  - ${error}`);
    });
    return false;
  }
  
  log.success('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
  
  // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  console.log('\nüìä –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  printConfig();
  
  return true;
}

/**
 * [RU] –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * [EN] Creates test users
 */
function createTestUsers(database) {
  log.step('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  try {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    database.exec("DELETE FROM users WHERE telegram_id LIKE 'test_%'");
    
    const insertUser = database.prepare(`
      INSERT INTO users (telegram_id, username, full_name, attendance_status) 
      VALUES (?, ?, ?, ?)
    `);
    
    const testUsers = [
      ['test_111', 'test_user_1', '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1', 'attending'],
      ['test_222', 'test_user_2', '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2', 'maybe'],
      ['test_333', null, '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3', 'attending']
    ];
    
    testUsers.forEach(userData => {
      insertUser.run(...userData);
    });
    
    log.success(`–°–æ–∑–¥–∞–Ω–æ ${testUsers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    return true;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
    return false;
  }
}

/**
 * [RU] –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * [EN] Tests user validation
 */
function testUserValidation(database) {
  log.step('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  try {
    const validator = new UserDataValidator(database);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const eligibleResult = validator.getEligibleUsersForEnhancedBroadcast();
    
    if (!eligibleResult.success) {
      log.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${eligibleResult.error}`);
      return false;
    }
    
    log.success(`–ù–∞–π–¥–µ–Ω–æ ${eligibleResult.eligibleCount} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ${eligibleResult.totalCount} –æ–±—â–∏—Ö`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsResult = validator.getEligibilityStatistics();
    
    if (statsResult.success) {
      log.info(`–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statsResult.stats.eligibilityRate.toFixed(1)}%`);
      log.info(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statsResult.stats.activeUsers}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
    const testUserId = 'test_111';
    const userValidation = validator.hasUserData(testUserId);
    
    if (userValidation.hasData) {
      log.success(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${testUserId} –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${userValidation.reason}`);
    } else {
      log.warning(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${testUserId} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${userValidation.reason}`);
    }
    
    return true;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
    return false;
  }
}

/**
 * [RU] –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * [EN] Tests message sequence processing
 */
async function testMessageSequenceProcessor(database) {
  log.step('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...');
  
  try {
    const processor = new MessageSequenceProcessor(database);
    const mockBot = createMockBot();
    
    console.log('\nüì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è test_111:');
    
    const result = await processor.processUserMessageSequence(
      mockBot,
      'test_111',
      '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      {
        includeUsefulInfo: true,
        includeEventDetails: true,
        triggerMenu: true,
        sequenceDelay: 100 // –ë—ã—Å—Ç—Ä–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      }
    );
    
    if (result.success) {
      log.success(`–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${result.results.completedSteps}/${result.results.totalSteps} —à–∞–≥–æ–≤ (${result.completionRate.toFixed(1)}%)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —à–∞–≥–∏
      Object.entries(result.results.steps).forEach(([step, data]) => {
        const status = data.success ? '‚úÖ' : '‚ùå';
        console.log(`  ${status} ${step}: ${data.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
      });
      
      if (result.results.errors.length > 0) {
        log.warning(`–û—à–∏–±–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${result.results.errors.length}`);
        result.results.errors.forEach(error => {
          console.log(`    - ${error.step}: ${error.error}`);
        });
      }
    } else {
      log.error(`–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${result.criticalError}`);
      return false;
    }
    
    return true;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${error.message}`);
    return false;
  }
}

/**
 * [RU] –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
 * [EN] Tests full enhanced broadcast
 */
async function testEnhancedBroadcast(database) {
  log.step('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...');
  
  try {
    const adminAPI = new AdminAPI(database);
    const mockBot = createMockBot();
    
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:');
    
    const result = await adminAPI.sendEnhancedBroadcast(mockBot, 'test_admin_123', {
      messageText: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏',
      config: {
        delays: {
          betweenMessages: 50,
          betweenUsers: 20
        },
        batching: {
          maxUsersPerBatch: 3
        }
      }
    });
    
    if (result.success) {
      log.success('–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
      console.log(`  üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.enhancedStats.total}`);
      console.log(`  ‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: ${result.enhancedStats.eligibleForEnhanced}`);
      console.log(`  üì® –û—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${result.enhancedStats.standardDelivered}`);
      console.log(`  üéØ –ü–æ–ª–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${result.enhancedStats.enhancedSequenceCompleted}`);
      console.log(`  üí° –ü–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${result.enhancedStats.usefulInfoDelivered}`);
      console.log(`  üìÖ –î–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${result.enhancedStats.eventDetailsDelivered}`);
      console.log(`  üîÑ –ú–µ–Ω—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${result.enhancedStats.menuTriggered}`);
      console.log(`  ‚ùå –û—à–∏–±–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${result.enhancedStats.sequenceFailures}`);
      console.log(`  üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏: ${result.enhancedStats.completionRate.toFixed(1)}%`);
      console.log(`  ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.duration}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const adminMessage = database.prepare(`
        SELECT * FROM admin_messages 
        WHERE message_type = 'enhanced_broadcast' 
        ORDER BY sent_at DESC LIMIT 1
      `).get();
      
      if (adminMessage && adminMessage.enhanced_mode) {
        log.success('–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤ admin_messages');
      } else {
        log.warning('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ admin_messages');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      const deliveryLogs = database.prepare(`
        SELECT COUNT(*) as log_count 
        FROM enhanced_delivery_logs 
        WHERE admin_message_id = ?
      `).get(result.messageId);
      
      if (deliveryLogs && deliveryLogs.log_count > 0) {
        log.success(`–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${deliveryLogs.log_count} –∑–∞–ø–∏—Å–µ–π`);
      } else {
        log.warning('–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
      }
      
    } else {
      log.error(`–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${result.error}`);
      return false;
    }
    
    return true;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: ${error.message}`);
    console.error(error.stack);
    return false;
  }
}

/**
 * [RU] –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
 * [EN] Cleans up test data
 */
function cleanupTestData(database) {
  log.step('–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    database.exec("DELETE FROM users WHERE telegram_id LIKE 'test_%'");
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    database.exec("DELETE FROM admin_messages WHERE sent_by LIKE 'test_%'");
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    database.exec("DELETE FROM enhanced_delivery_logs WHERE admin_message_id LIKE '%test_%'");
    
    log.success('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    return true;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    return false;
  }
}

/**
 * [RU] –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * [EN] Main validation function
 */
async function main() {
  log.header('üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –ê–î–ú–ò–ù–°–ö–û–ô –†–ê–°–°–´–õ–ö–ò');
  console.log();
  
  let database;
  let allTestsPassed = true;
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (!await validateDatabase()) {
      allTestsPassed = false;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!validateConfiguration()) {
      allTestsPassed = false;
    }
    
    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if (!allTestsPassed) {
      log.error('–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.');
      process.exit(1);
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    const dbPath = process.env.DATABASE_PATH || './database/bot_database.db';
    database = new Database(dbPath);
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!createTestUsers(database)) {
      allTestsPassed = false;
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!testUserValidation(database)) {
      allTestsPassed = false;
    }
    
    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (!await testMessageSequenceProcessor(database)) {
      allTestsPassed = false;
    }
    
    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    if (!await testEnhancedBroadcast(database)) {
      allTestsPassed = false;
    }
    
    // 7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cleanupTestData(database);
    
  } catch (error) {
    log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
    console.error(error.stack);
    allTestsPassed = false;
  } finally {
    if (database) {
      database.close();
    }
  }
  
  console.log();
  log.header('üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò');
  
  if (allTestsPassed) {
    log.success('–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
    console.log(`
${colors.green}${colors.bold}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     ‚ú® –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! ‚ú®                 ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞   ‚ïë
‚ïë  –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ.          ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:                                       ‚ïë
‚ïë  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π              ‚ïë
‚ïë  ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π                      ‚ïë
‚ïë  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥                       ‚ïë
‚ïë  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ                        ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}
    `);
    process.exit(0);
  } else {
    log.error('–ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö.');
    console.log(`
${colors.red}${colors.bold}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     ‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê ‚ùå                ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω—Å–∫–æ–π       ‚ïë
‚ïë  —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ    ‚ïë
‚ïë  –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–Ω–æ–≤–∞.                                            ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:                             ‚ïë
‚ïë  node validate-enhanced-broadcast.js                         ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}
    `);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(error => {
    log.error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.error(error.stack);
    process.exit(1);
  });
}

module.exports = {
  main,
  validateDatabase,
  validateConfiguration,
  testUserValidation,
  testMessageSequenceProcessor,
  testEnhancedBroadcast
};