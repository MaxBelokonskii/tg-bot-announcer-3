/**
 * [RU] –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
 * [EN] Text and data formatting utilities
 */

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * [EN] Format user name
 */
function formatUserName(user) {
  if (!user) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  if (user.full_name) {
    return user.full_name;
  }
  
  if (user.first_name && user.last_name) {
    return `${user.first_name} ${user.last_name}`;
  }
  
  if (user.first_name) {
    return user.first_name;
  }
  
  if (user.username) {
    return `@${user.username}`;
  }
  
  return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id || user.telegram_id || '–±–µ–∑ –∏–º–µ–Ω–∏'}`;
}

/**
 * [RU] –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
 * [EN] Truncate text with ellipsis
 */
function truncateText(text, maxLength = 100, ellipsis = '...') {
  if (!text || text.length <= maxLength) {
    return text || '';
  }
  
  return text.substring(0, maxLength - ellipsis.length) + ellipsis;
}

/**
 * [RU] –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram
 * [EN] Escape special characters for Telegram
 */
function escapeMarkdown(text) {
  if (!text) return '';
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
  return text.replace(/[_*[\]()~`>#+\-=|{}.!\\]/g, '\\$&');
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 * [EN] Format status
 */
function formatStatus(status) {
  const statusMap = {
    pending: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ',
    sent: '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    delivered: 'üì® –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
    failed: '‚ùå –û—à–∏–±–∫–∞',
    cancelled: 'üö´ –û—Ç–º–µ–Ω–µ–Ω–æ',
    blocked: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
    active: '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
    inactive: '‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'
  };
  
  return statusMap[status] || status;
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
 * [EN] Format number with thousands separators
 */
function formatNumber(number, locale = 'ru-RU') {
  if (typeof number !== 'number') {
    return number;
  }
  
  return number.toLocaleString(locale);
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
 * [EN] Format file size
 */
function formatFileSize(bytes) {
  if (bytes === 0) return '0 –ë';
  
  const k = 1024;
  const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * [EN] Format execution time
 */
function formatDuration(milliseconds) {
  if (milliseconds < 1000) {
    return `${milliseconds}–º—Å`;
  }
  
  const seconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  
  if (days > 0) {
    return `${days}–¥ ${hours % 24}—á ${minutes % 60}–º`;
  }
  
  if (hours > 0) {
    return `${hours}—á ${minutes % 60}–º ${seconds % 60}—Å`;
  }
  
  if (minutes > 0) {
    return `${minutes}–º ${seconds % 60}—Å`;
  }
  
  return `${seconds}—Å`;
}

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
 * [EN] Create progress bar
 */
function createProgressBar(current, total, length = 10) {
  if (total === 0) return '‚ñë'.repeat(length);
  
  const progress = Math.floor((current / total) * length);
  const filled = '‚ñà'.repeat(progress);
  const empty = '‚ñë'.repeat(length - progress);
  
  return filled + empty;
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
 * [EN] Format percentage
 */
function formatPercentage(value, total, decimals = 1) {
  if (total === 0) return '0%';
  
  const percentage = (value / total) * 100;
  return `${percentage.toFixed(decimals)}%`;
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * [EN] Format list of items
 */
function formatList(items, options = {}) {
  const {
    numbered = false,
    bullet = '‚Ä¢',
    separator = '\n',
    maxItems = null
  } = options;
  
  if (!Array.isArray(items) || items.length === 0) {
    return '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç';
  }
  
  let displayItems = maxItems ? items.slice(0, maxItems) : items;
  
  const formatted = displayItems.map((item, index) => {
    const prefix = numbered ? `${index + 1}.` : bullet;
    return `${prefix} ${item}`;
  });
  
  let result = formatted.join(separator);
  
  if (maxItems && items.length > maxItems) {
    result += `${separator}... –∏ –µ—â—ë ${items.length - maxItems}`;
  }
  
  return result;
}

/**
 * [RU] –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
 * [EN] Center text
 */
function centerText(text, width = 40, fillChar = ' ') {
  if (text.length >= width) return text;
  
  const totalPadding = width - text.length;
  const leftPadding = Math.floor(totalPadding / 2);
  const rightPadding = totalPadding - leftPadding;
  
  return fillChar.repeat(leftPadding) + text + fillChar.repeat(rightPadding);
}

/**
 * [RU] –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
 * [EN] Clean text from extra spaces
 */
function cleanText(text) {
  if (!text) return '';
  
  return text
    .replace(/\s+/g, ' ')  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
    .replace(/\n\s*\n/g, '\n')  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –æ–¥–∏–Ω
    .trim();  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
}

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
 * [EN] Create header with separators
 */
function createHeader(title, char = '=', width = 40) {
  const cleanTitle = ` ${title} `;
  const totalPadding = Math.max(0, width - cleanTitle.length);
  const sidePadding = Math.floor(totalPadding / 2);
  
  const leftSide = char.repeat(sidePadding);
  const rightSide = char.repeat(totalPadding - sidePadding);
  
  return leftSide + cleanTitle + rightSide;
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞
 * [EN] Format JSON for readable output
 */
function formatJSON(obj, indent = 2) {
  return JSON.stringify(obj, null, indent);
}

/**
 * [RU] –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * [EN] Mask sensitive information
 */
function maskSensitive(text, visibleChars = 4, maskChar = '*') {
  if (!text || text.length <= visibleChars) {
    return maskChar.repeat(text?.length || 4);
  }
  
  const visible = text.substring(0, visibleChars);
  const masked = maskChar.repeat(text.length - visibleChars);
  
  return visible + masked;
}

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
 * [EN] Generate random identifier
 */
function generateId(length = 8) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  
  return result;
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 * [EN] Format useful information message
 */
function formatUsefulInfoMessage(usefulInfo) {
  if (!Array.isArray(usefulInfo) || usefulInfo.length === 0) {
    return 'üìã <b>–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';
  }

  let message = 'üìã <b>–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n';
  
  usefulInfo.forEach((info, index) => {
    message += `üí° ${info}`;
    if (index < usefulInfo.length - 1) {
      message += '\n\n';
    }
  });
  
  return message;
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–æ–±—ã—Ç–∏—è
 * [EN] Format event details message
 */
function formatEventDetailsMessage(eventDetails) {
  if (!eventDetails || typeof eventDetails !== 'object') {
    return 'üìÖ <b>–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è</b>\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';
  }

  let message = 'üìÖ <b>–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è</b>\n\n';
  
  if (eventDetails.name) {
    message += `üéâ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${eventDetails.name}\n`;
  }
  
  if (eventDetails.date) {
    message += `üìÖ <b>–î–∞—Ç–∞:</b> ${eventDetails.date}\n`;
  }
  
  if (eventDetails.time) {
    message += `‚è∞ <b>–í—Ä–µ–º—è:</b> ${eventDetails.time}\n`;
  }
  
  if (eventDetails.location) {
    message += `üìç <b>–ú–µ—Å—Ç–æ:</b> ${eventDetails.location}\n`;
  }
  
  if (eventDetails.address) {
    message += `üó∫Ô∏è <b>–ê–¥—Ä–µ—Å:</b> ${eventDetails.address}\n`;
  }
  
  if (eventDetails.dressCode) {
    message += `üëó <b>–î—Ä–µ—Å—Å-–∫–æ–¥:</b> ${eventDetails.dressCode}\n`;
  }
  
  if (eventDetails.contact) {
    message += `üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> ${eventDetails.contact}\n`;
  }
  
  if (eventDetails.description) {
    message += `\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${eventDetails.description}`;
  }
  
  if (eventDetails.specialInstructions) {
    message += `\n\n‚ö†Ô∏è <b>–û—Å–æ–±—ã–µ —É–∫–∞–∑–∞–Ω–∏—è:</b>\n${eventDetails.specialInstructions}`;
  }
  
  return message;
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
 * [EN] Format delivery statistics for admin broadcast
 */
function formatEnhancedDeliveryStats(stats) {
  if (!stats) return '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
  
  let message = 'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n';
  
  if (stats.total !== undefined) {
    message += `üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${formatNumber(stats.total)}\n`;
  }
  
  if (stats.eligibleForEnhanced !== undefined) {
    message += `‚úÖ <b>–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:</b> ${formatNumber(stats.eligibleForEnhanced)}\n`;
  }
  
  if (stats.enhancedSequenceCompleted !== undefined) {
    message += `üéØ <b>–ü–æ–ª–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b> ${formatNumber(stats.enhancedSequenceCompleted)}\n`;
  }
  
  if (stats.standardDelivered !== undefined) {
    message += `üì® <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:</b> ${formatNumber(stats.standardDelivered)}\n`;
  }
  
  if (stats.usefulInfoDelivered !== undefined) {
    message += `üí° <b>–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞:</b> ${formatNumber(stats.usefulInfoDelivered)}\n`;
  }
  
  if (stats.eventDetailsDelivered !== undefined) {
    message += `üìÖ <b>–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã:</b> ${formatNumber(stats.eventDetailsDelivered)}\n`;
  }
  
  if (stats.menuTriggered !== undefined) {
    message += `üîÑ <b>–ú–µ–Ω—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:</b> ${formatNumber(stats.menuTriggered)}\n`;
  }
  
  if (stats.sequenceFailures !== undefined && stats.sequenceFailures > 0) {
    message += `‚ùå <b>–û—à–∏–±–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> ${formatNumber(stats.sequenceFailures)}\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
  if (stats.eligibleForEnhanced && stats.enhancedSequenceCompleted !== undefined) {
    const successRate = formatPercentage(stats.enhancedSequenceCompleted, stats.eligibleForEnhanced);
    message += `\nüìà <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:</b> ${successRate}`;
  }
  
  return message;
}

module.exports = {
  formatUserName,
  truncateText,
  escapeMarkdown,
  formatStatus,
  formatNumber,
  formatFileSize,
  formatDuration,
  createProgressBar,
  formatPercentage,
  formatList,
  centerText,
  cleanText,
  createHeader,
  formatJSON,
  maskSensitive,
  generateId,
  formatUsefulInfoMessage,
  formatEventDetailsMessage,
  formatEnhancedDeliveryStats
};