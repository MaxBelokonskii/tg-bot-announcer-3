/**
 * [RU] –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
 * [EN] Message sequence processor for enhanced admin broadcasts
 */

const { EventInfoAPI } = require('../features/event-info/api');
const { safeSendMessage, createInlineKeyboard, standardButtons } = require('./message-helpers');
const { formatEventDetailsMessage, formatUsefulInfoMessage } = require('./format-utils');
const texts = require('../bot/texts');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * [EN] Class for processing enhanced message delivery sequences
 */
class MessageSequenceProcessor {
  constructor(database) {
    this.database = database;
    this.eventInfoAPI = new EventInfoAPI(database);
  }

  /**
   * [RU] –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * [EN] Orchestrates the complete message sequence for a user
   */
  async processUserMessageSequence(bot, userId, adminMessage, options = {}) {
    const sequenceId = `seq_${userId}_${Date.now()}`;
    const {
      includeUsefulInfo = true,
      includeEventDetails = true,
      triggerMenu = true,
      sequenceDelay = 2000
    } = options;

    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const results = {
      sequenceId,
      userId,
      steps: {
        adminMessage: { attempted: true, success: false, timestamp: null },
        usefulInfo: { attempted: includeUsefulInfo, success: false, timestamp: null },
        eventDetails: { attempted: includeEventDetails, success: false, timestamp: null },
        menuTrigger: { attempted: triggerMenu, success: false, timestamp: null }
      },
      totalSteps: 1 + (includeUsefulInfo ? 1 : 0) + (includeEventDetails ? 1 : 0) + (triggerMenu ? 1 : 0),
      completedSteps: 0,
      errors: []
    };

    try {
      // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º)
      results.steps.adminMessage.success = true;
      results.steps.adminMessage.timestamp = new Date().toISOString();
      results.completedSteps++;
      console.log(`‚úÖ –®–∞–≥ 1/4: –ê–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

      // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      if (includeUsefulInfo) {
        await this.delay(sequenceDelay);
        const usefulInfoResult = await this.sendUsefulInformation(bot, userId);
        results.steps.usefulInfo.success = usefulInfoResult.success;
        results.steps.usefulInfo.timestamp = new Date().toISOString();
        
        if (usefulInfoResult.success) {
          results.completedSteps++;
          console.log(`‚úÖ –®–∞–≥ 2/4: –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        } else {
          results.errors.push({
            step: 'usefulInfo',
            error: usefulInfoResult.error,
            timestamp: new Date().toISOString()
          });
          console.log(`‚ùå –®–∞–≥ 2/4: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è ${userId}: ${usefulInfoResult.error}`);
        }
      }

      // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è
      if (includeEventDetails) {
        await this.delay(sequenceDelay);
        const eventDetailsResult = await this.sendEventDetails(bot, userId);
        results.steps.eventDetails.success = eventDetailsResult.success;
        results.steps.eventDetails.timestamp = new Date().toISOString();
        
        if (eventDetailsResult.success) {
          results.completedSteps++;
          console.log(`‚úÖ –®–∞–≥ 3/4: –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        } else {
          results.errors.push({
            step: 'eventDetails',
            error: eventDetailsResult.error,
            timestamp: new Date().toISOString()
          });
          console.log(`‚ùå –®–∞–≥ 3/4: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è –¥–ª—è ${userId}: ${eventDetailsResult.error}`);
        }
      }

      // –®–∞–≥ 4: –í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      if (triggerMenu) {
        await this.delay(sequenceDelay);
        const menuResult = await this.triggerMainMenu(bot, userId);
        results.steps.menuTrigger.success = menuResult.success;
        results.steps.menuTrigger.timestamp = new Date().toISOString();
        
        if (menuResult.success) {
          results.completedSteps++;
          console.log(`‚úÖ –®–∞–≥ 4/4: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } else {
          results.errors.push({
            step: 'menuTrigger',
            error: menuResult.error,
            timestamp: new Date().toISOString()
          });
          console.log(`‚ùå –®–∞–≥ 4/4: –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –¥–ª—è ${userId}: ${menuResult.error}`);
        }
      }

      const completionRate = (results.completedSteps / results.totalSteps) * 100;
      console.log(`üìä –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${results.completedSteps}/${results.totalSteps} —à–∞–≥–æ–≤ (${completionRate.toFixed(1)}%)`);

      return {
        success: results.completedSteps > 0, // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω
        results,
        completionRate
      };

    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
      
      results.errors.push({
        step: 'critical',
        error: error.message,
        timestamp: new Date().toISOString()
      });

      return {
        success: false,
        results,
        completionRate: (results.completedSteps / results.totalSteps) * 100,
        criticalError: error.message
      };
    }
  }

  /**
   * [RU] –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   * [EN] Sends useful information message
   */
  async sendUsefulInformation(bot, userId) {
    try {
      const usefulInfoResult = await this.eventInfoAPI.getUsefulInfo();
      
      if (!usefulInfoResult.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ${usefulInfoResult.error}`);
      }

      if (!usefulInfoResult.info || usefulInfoResult.info.length === 0) {
        throw new Error('–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—É—Å—Ç–∞');
      }

      const messageText = formatUsefulInfoMessage(usefulInfoResult.info);
      
      await bot.telegram.sendMessage(userId, messageText, { 
        parse_mode: 'HTML',
        disable_web_page_preview: true 
      });

      return { success: true };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–æ–±—ã—Ç–∏—è
   * [EN] Sends event details message
   */
  async sendEventDetails(bot, userId) {
    try {
      const eventDetailsResult = await this.eventInfoAPI.getEventDetails();
      
      if (!eventDetailsResult.success) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è: ${eventDetailsResult.error}`);
      }

      if (!eventDetailsResult.details) {
        throw new Error('–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –ø—É—Å—Ç—ã');
      }

      const messageText = formatEventDetailsMessage(eventDetailsResult.details);
      
      await bot.telegram.sendMessage(userId, messageText, { 
        parse_mode: 'HTML',
        disable_web_page_preview: true 
      });

      return { success: true };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
   * [EN] Programmatically triggers main menu display
   */
  async triggerMainMenu(bot, userId) {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MainMenu –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const menuText = `${texts.menu.title}\n\n–ü—Ä–∏–≤–µ—Ç! ${texts.menu.description}`;
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
      const menuItems = [
        { text: texts.menu.buttons.changeAttendance, callback_data: 'change_attendance' },
        { text: texts.menu.buttons.eventDetails, callback_data: 'event_details' },
        { text: texts.menu.buttons.usefulInfo, callback_data: 'useful_info' }
      ];
      
      const keyboard = createInlineKeyboard(menuItems, 2);
      
      await bot.telegram.sendMessage(userId, menuText, {
        parse_mode: 'HTML',
        reply_markup: keyboard.reply_markup
      });

      return { success: true };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   * [EN] Validates sequence completion
   */
  validateSequenceCompletion(sequenceResults) {
    if (!sequenceResults || !sequenceResults.results) {
      return { valid: false, reason: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' };
    }

    const { steps, totalSteps, completedSteps } = sequenceResults.results;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    if (!steps.adminMessage.success) {
      return { valid: false, reason: '–û—Å–Ω–æ–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' };
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ (50% –æ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤)
    const minimumSuccessRate = 0.5;
    const actualSuccessRate = completedSteps / totalSteps;
    
    if (actualSuccessRate < minimumSuccessRate) {
      return { 
        valid: false, 
        reason: `–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${(actualSuccessRate * 100).toFixed(1)}% (–º–∏–Ω–∏–º—É–º: ${minimumSuccessRate * 100}%)` 
      };
    }

    return { 
      valid: true, 
      completionRate: actualSuccessRate * 100,
      completedSteps,
      totalSteps
    };
  }

  /**
   * [RU] –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * [EN] Execution delay
   */
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

module.exports = {
  MessageSequenceProcessor
};