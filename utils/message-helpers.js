/**
 * [RU] –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * [EN] Message construction and sending utilities
 */

const { Markup } = require('telegraf');

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
 * [EN] Create keyboard with buttons
 */
function createKeyboard(buttons, options = {}) {
  const {
    columns = 2,
    resize = true,
    oneTime = false,
    selective = false
  } = options;

  if (!Array.isArray(buttons) || buttons.length === 0) {
    return Markup.removeKeyboard();
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
  const rows = [];
  for (let i = 0; i < buttons.length; i += columns) {
    rows.push(buttons.slice(i, i + columns));
  }

  return Markup.keyboard(rows).resize(resize).oneTime(oneTime).selective(selective);
}

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 * [EN] Create inline keyboard
 */
function createInlineKeyboard(buttons, columns = 2) {
  if (!Array.isArray(buttons) || buttons.length === 0) {
    return Markup.inlineKeyboard([]);
  }

  const rows = [];
  for (let i = 0; i < buttons.length; i += columns) {
    const row = buttons.slice(i, i + columns).map(button => {
      if (typeof button === 'string') {
        return Markup.button.callback(button, button);
      }
      
      return Markup.button.callback(button.text, button.callback_data || button.text);
    });
    rows.push(row);
  }

  return Markup.inlineKeyboard(rows);
}

/**
 * [RU] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * [EN] Standard navigation buttons
 */
const standardButtons = {
  mainMenu: { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
  back: { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back' },
  cancel: { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' },
  confirm: { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm' },
  refresh: { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh' },
  
  // –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  yes: { text: '‚úÖ –î–∞, –±—É–¥—É', callback_data: 'response_yes' },
  no: { text: '‚ùå –ù–µ—Ç, –Ω–µ —Å–º–æ–≥—É', callback_data: 'response_no' },
  maybe: { text: 'ü§î –í–æ–∑–º–æ–∂–Ω–æ', callback_data: 'response_maybe' },
  
  // –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª—ã
  events: { text: 'üìÖ –°–æ–±—ã—Ç–∏—è', callback_data: 'events' },
  responses: { text: 'üí¨ –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã', callback_data: 'responses' },
  settings: { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' },
  help: { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
};

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
 * [EN] Create message with markup
 */
function createMessage(text, keyboard = null, options = {}) {
  const {
    parseMode = 'HTML',
    disablePreview = true,
    disableNotification = false
  } = options;

  const messageOptions = {
    parse_mode: parseMode,
    disable_web_page_preview: disablePreview,
    disable_notification: disableNotification
  };

  if (keyboard) {
    messageOptions.reply_markup = keyboard;
  }

  return {
    text: text,
    options: messageOptions
  };
}

/**
 * [RU] –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 * [EN] Safe message sending
 */
async function safeSendMessage(ctx, text, keyboard = null, options = {}) {
  try {
    const message = createMessage(text, keyboard, options);
    
    if (ctx.callbackQuery) {
      // –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageText(message.text, message.options);
      await ctx.answerCbQuery();
    } else {
      // –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
      await ctx.reply(message.text, message.options);
    }
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    try {
      await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } catch (fallbackError) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', fallbackError.message);
    }
    
    return { success: false, error: error.message };
  }
}

/**
 * [RU] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 * [EN] Send admin notification
 */
async function sendAdminNotification(bot, adminId, message, urgent = false) {
  if (!adminId) return { success: false, error: 'Admin ID not configured' };
  
  try {
    const prefix = urgent ? 'üö® –°–†–û–ß–ù–û:' : 'üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:';
    const fullMessage = `${prefix}\n\n${message}\n\nüìÖ ${new Date().toLocaleString('ru-RU')}`;
    
    await bot.telegram.sendMessage(adminId, fullMessage, {
      parse_mode: 'HTML',
      disable_notification: !urgent
    });
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * [RU] –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * [EN] Send broadcast message
 */
async function sendBroadcast(bot, userIds, message, options = {}) {
  const {
    delay = 100, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ –º—Å
    batchSize = 30, // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è Telegram API limits
    onProgress = null, // Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    onError = null // Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  } = options;

  const results = {
    total: userIds.length,
    sent: 0,
    failed: 0,
    errors: []
  };

  for (let i = 0; i < userIds.length; i += batchSize) {
    const batch = userIds.slice(i, i + batchSize);
    
    const batchPromises = batch.map(async (userId, index) => {
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
        if (index > 0) {
          await new Promise(resolve => setTimeout(resolve, delay));
        }
        
        await bot.telegram.sendMessage(userId, message.text, message.options);
        results.sent++;
        
        if (onProgress) {
          onProgress(results);
        }
        
        return { userId, success: true };
      } catch (error) {
        results.failed++;
        const errorInfo = { userId, error: error.message };
        results.errors.push(errorInfo);
        
        if (onError) {
          onError(errorInfo);
        }
        
        return { userId, success: false, error: error.message };
      }
    });

    await Promise.all(batchPromises);
  }

  return results;
}

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 * [EN] Create confirmation message
 */
function createConfirmationMessage(text, confirmCallback = 'confirm', cancelCallback = 'cancel') {
  const keyboard = createInlineKeyboard([
    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: confirmCallback },
    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: cancelCallback }
  ], 2);

  return createMessage(text, keyboard);
}

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
 * [EN] Create paginated list
 */
function createPaginatedList(items, page = 1, itemsPerPage = 5, baseCallback = 'page') {
  const totalPages = Math.ceil(items.length / itemsPerPage);
  const startIndex = (page - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentItems = items.slice(startIndex, endIndex);

  let text = currentItems.join('\n\n');
  text += `\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}`;

  const buttons = [];
  
  if (page > 1) {
    buttons.push({ text: '‚óÄÔ∏è –ü—Ä–µ–¥.', callback_data: `${baseCallback}_${page - 1}` });
  }
  
  if (page < totalPages) {
    buttons.push({ text: '‚ñ∂Ô∏è –°–ª–µ–¥.', callback_data: `${baseCallback}_${page + 1}` });
  }

  buttons.push(standardButtons.mainMenu);

  const keyboard = createInlineKeyboard(buttons, 2);
  return createMessage(text, keyboard);
}

/**
 * [RU] –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
 * [EN] Create selection menu
 */
function createSelectionMenu(title, options, baseCallback = 'select') {
  let text = title + '\n\n';
  
  const buttons = options.map((option, index) => ({
    text: `${index + 1}. ${option.text}`,
    callback_data: `${baseCallback}_${option.value || index}`
  }));

  buttons.push(standardButtons.back);

  const keyboard = createInlineKeyboard(buttons, 1);
  return createMessage(text, keyboard);
}

/**
 * [RU] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * [EN] Format errors for user
 */
function formatUserError(error, context = '') {
  const userFriendlyErrors = {
    'Bad Request: message is not modified': '–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ',
    'Bad Request: query is too old': '–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
    'Forbidden: bot was blocked by the user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞',
    'Bad Request: chat not found': '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
  };

  const friendlyMessage = userFriendlyErrors[error.message] || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞';
  
  return context 
    ? `üòî ${friendlyMessage} (${context})`
    : `üòî ${friendlyMessage}`;
}

/**
 * [RU] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * [EN] Log user actions
 */
function logUserAction(ctx, action, details = '') {
  const user = ctx.from;
  const timestamp = new Date().toISOString();
  
  const logEntry = {
    timestamp,
    userId: user.id,
    username: user.username || 'unknown',
    action,
    details,
    chatId: ctx.chat?.id
  };

  console.log(`üìä User Action:`, JSON.stringify(logEntry, null, 2));
  return logEntry;
}

module.exports = {
  createKeyboard,
  createInlineKeyboard,
  standardButtons,
  createMessage,
  safeSendMessage,
  sendAdminNotification,
  sendBroadcast,
  createConfirmationMessage,
  createPaginatedList,
  createSelectionMenu,
  formatUserError,
  logUserAction
};