/**
 * [RU] –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
 * [EN] Test for main menu functionality fix
 */

const { DatabaseConnection } = require('./database/connection');
const { MainMenu } = require('./interface/main-menu');
const { createInlineKeyboard } = require('./utils/message-helpers');

async function testMenuGeneration() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é...")

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const database = new DatabaseConnection('./data/events.db');
    const db = database.connect();

    const mainMenu = new MainMenu(database);

    // –¢–µ—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    const regularUserItems = mainMenu.generateMenuItems("123456789");
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: ${regularUserItems.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–Ω–æ–ø–æ–∫
    let hasErrors = false;
    regularUserItems.forEach((item, index) => {
      console.log(`   –ö–Ω–æ–ø–∫–∞ ${index + 1}: "${item.text}" -> callback_data: "${item.callback_data}"`);
      
      if (!item.text || (!item.callback_data && !item.callback)) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ ${index + 1}:`, item);
        hasErrors = true;
      }
    });

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    console.log("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
    const keyboard = createInlineKeyboard(regularUserItems, 2);
    console.log("   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:", keyboard ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞");

    // –¢–µ—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ADMIN_ID)
    if (process.env.ADMIN_ID) {
      console.log("\nüëë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
      const adminItems = mainMenu.generateMenuItems(process.env.ADMIN_ID);
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: ${adminItems.length}`);
      
      adminItems.forEach((item, index) => {
        console.log(`   –ö–Ω–æ–ø–∫–∞ ${index + 1}: "${item.text}" -> callback_data: "${item.callback_data}"`);
      });
      
      const adminKeyboard = createInlineKeyboard(adminItems, 2);
      console.log("   –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:", adminKeyboard ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞");
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!hasErrors) {
      console.log("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
    } else {
      console.log("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–Ω–æ–ø–æ–∫.");
    }

    database.close();
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message);
    console.error("   –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error.stack);
  }
}

// –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
function testButtonStructure() {
  console.log("\nüîç –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–Ω–æ–ø–æ–∫:");
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
  const testButtons = [
    { text: "–¢–µ—Å—Ç 1", callback_data: "test1" },
    { text: "–¢–µ—Å—Ç 2", callback_data: "test2" }
  ];
  
  console.log("   –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:", testButtons);
  
  const testKeyboard = createInlineKeyboard(testButtons, 2);
  console.log("   –¢–µ—Å—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:", testKeyboard ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞");
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
  const wrongButtons = [
    { text: "–¢–µ—Å—Ç 3", callback: "test3" }, // —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
    { text: "–¢–µ—Å—Ç 4", callback_data: "test4" } // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  ];
  
  console.log("   –°–º–µ—à–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:", wrongButtons);
  
  const mixedKeyboard = createInlineKeyboard(wrongButtons, 2);
  console.log("   –°–º–µ—à–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:", mixedKeyboard ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞");
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é\n");
  
  // –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  testButtonStructure();
  
  // –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  await testMenuGeneration();
  
  console.log("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª–∞
if (require.main === module) {
  runTests().catch(error => {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
}

module.exports = {
  testMenuGeneration,
  testButtonStructure,
  runTests
};