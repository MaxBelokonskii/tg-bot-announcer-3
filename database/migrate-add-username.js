#!/usr/bin/env node

/**
 * [RU] –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è username –≤ —Ç–∞–±–ª–∏—Ü—É users
 * [EN] Migration script to add username field to users table
 */

const { getDatabaseConnection } = require('./connection');
const fs = require('fs');

/**
 * [RU] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è username
 * [EN] Execute migration to add username field
 */
async function migrateAddUsername() {
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è username...');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbPath = process.env.DATABASE_PATH || './bot_database.db';
    
    if (!fs.existsSync(dbPath)) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ init-database.js —Å–Ω–∞—á–∞–ª–∞.');
      process.exit(1);
    }

    const dbConnection = getDatabaseConnection(dbPath);
    const db = dbConnection.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users...');
    const currentSchema = db.prepare(`PRAGMA table_info(users)`).all();
    const hasUsername = currentSchema.some(col => col.name === 'username');
    
    if (hasUsername) {
      console.log('‚ÑπÔ∏è –ü–æ–ª–µ username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users');
      dbConnection.close();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const backupData = db.prepare(`SELECT * FROM users`).all();
    console.log(`üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${backupData.length} –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ username
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ username –≤ —Ç–∞–±–ª–∏—Ü—É users...');
    db.exec(`ALTER TABLE users ADD COLUMN username TEXT;`);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—è username
    console.log('üîç –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—è username...');
    db.exec(`CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
    const newSchema = db.prepare(`PRAGMA table_info(users)`).all();
    const usernameColumn = newSchema.find(col => col.name === 'username');
    
    if (usernameColumn) {
      console.log('‚úÖ –ü–æ–ª–µ username —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
      console.log(`   –¢–∏–ø: ${usernameColumn.type}`);
      console.log(`   NULL —Ä–∞–∑—Ä–µ—à–µ–Ω: ${!usernameColumn.notnull}`);
    } else {
      throw new Error('–ü–æ–ª–µ username –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
    const currentData = db.prepare(`SELECT * FROM users`).all();
    if (currentData.length === backupData.length) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } else {
      console.warn('‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å!');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–æ–≤—ã–º –ø–æ–ª–µ–º
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–æ–≤—ã–º –ø–æ–ª–µ–º...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username
    const testInsert = db.prepare(`
      INSERT INTO users (telegram_id, full_name, username) 
      VALUES (?, ?, ?)
    `);
    
    const testResult = testInsert.run('test_migration_123', '–¢–µ—Å—Ç –ú–∏–≥—Ä–∞—Ü–∏–∏', 'test_user');
    
    if (testResult.changes > 0) {
      console.log('‚úÖ –í—Å—Ç–∞–≤–∫–∞ —Å username —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ
      const testUser = db.prepare(`
        SELECT telegram_id, full_name, username 
        FROM users 
        WHERE telegram_id = ?
      `).get('test_migration_123');
      
      if (testUser && testUser.username === 'test_user') {
        console.log('‚úÖ –ß—Ç–µ–Ω–∏–µ username —Ä–∞–±–æ—Ç–∞–µ—Ç');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º username
        const updateResult = db.prepare(`
          UPDATE users 
          SET username = ? 
          WHERE telegram_id = ?
        `).run('updated_test_user', 'test_migration_123');
        
        if (updateResult.changes > 0) {
          console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } else {
          console.warn('‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ');
        }
      } else {
        console.warn('‚ö†Ô∏è –ß—Ç–µ–Ω–∏–µ username –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ');
      }
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      db.prepare('DELETE FROM users WHERE telegram_id = ?').run('test_migration_123');
      console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } else {
      console.warn('‚ö†Ô∏è –í—Å—Ç–∞–≤–∫–∞ —Å username –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
    }

    dbConnection.close();
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏—è:');
    console.log('  - –ü–æ–ª–µ username (TEXT, NULL —Ä–∞–∑—Ä–µ—à–µ–Ω)');
    console.log('  - –ò–Ω–¥–µ–∫—Å idx_users_username');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

/**
 * [RU] –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è username)
 * [EN] Rollback migration (remove username field)
 */
async function rollbackAddUsername() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ username...');
  
  try {
    const dbPath = process.env.DATABASE_PATH || './bot_database.db';
    const dbConnection = getDatabaseConnection(dbPath);
    const db = dbConnection.connect();
    
    // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å username...');
    db.exec(`DROP INDEX IF EXISTS idx_users_username;`);
    
    // SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DROP COLUMN, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    console.log('üîß –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users –±–µ–∑ –ø–æ–ª—è username...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const userData = db.prepare(`
      SELECT id, telegram_id, full_name, attendance_status, 
             attendance_updated_at, created_at, updated_at 
      FROM users
    `).all();
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    db.exec(`DROP TABLE users;`);
    
    db.exec(`
      CREATE TABLE users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id TEXT UNIQUE NOT NULL,
        full_name TEXT NOT NULL,
        attendance_status TEXT DEFAULT 'attending' CHECK (attendance_status IN ('attending', 'not_attending', 'maybe')),
        attendance_updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const insertStmt = db.prepare(`
      INSERT INTO users (id, telegram_id, full_name, attendance_status, 
                        attendance_updated_at, created_at, updated_at)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `);
    
    for (const user of userData) {
      insertStmt.run(
        user.id, user.telegram_id, user.full_name, user.attendance_status,
        user.attendance_updated_at, user.created_at, user.updated_at
      );
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    db.exec(`CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);`);
    db.exec(`CREATE INDEX IF NOT EXISTS idx_users_attendance ON users(attendance_status);`);
    
    dbConnection.close();
    console.log('‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const command = process.argv[2];
  
  if (command === 'rollback') {
    rollbackAddUsername();
  } else {
    migrateAddUsername();
  }
}

module.exports = { migrateAddUsername, rollbackAddUsername };