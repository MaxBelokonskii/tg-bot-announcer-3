/**
 * [RU] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * [EN] User response collection interface
 */

const texts = require('../bot/texts');
const { createInlineKeyboard, safeSendMessage, standardButtons } = require('../utils/message-helpers');
const { ResponseUtils } = require('../utils/db-utils');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * [EN] User response management class
 */
class UserResponse {
  constructor(database) {
    this.responseUtils = new ResponseUtils(database);
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
   * [EN] Show event response interface
   */
  async showEventResponse(ctx, eventText, eventId = null) {
    try {
      const responseText = `${eventText}\n\n${texts.responses.confirmationPrompt}`;

      const buttons = [
        standardButtons.yes,
        standardButtons.no,
        standardButtons.maybe,
        standardButtons.mainMenu
      ];

      const keyboard = createInlineKeyboard(buttons, 3);

      await safeSendMessage(ctx, responseText, keyboard, { parseMode: 'HTML' });

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç–≤–µ—Ç–∞:', error.message);
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
   * [EN] Handle user response to event
   */
  async handleEventResponse(ctx, responseType, userId, eventId = null) {
    try {
      let responseText;
      let responseEmoji;

      switch (responseType) {
        case 'response_yes':
          responseText = '–î–∞, –±—É–¥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å';
          responseEmoji = '‚úÖ';
          break;
        case 'response_no':
          responseText = '–ù–µ—Ç, –Ω–µ —Å–º–æ–≥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å';
          responseEmoji = '‚ùå';
          break;
        case 'response_maybe':
          responseText = '–í–æ–∑–º–æ–∂–Ω–æ, —É—á–∞—Å—Ç–≤—É—é';
          responseEmoji = 'ü§î';
          break;
        default:
          throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const saveResult = this.responseUtils.saveUserResponse(userId, responseText);

      if (!saveResult.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const confirmationText = texts.formatText(texts.responses.responseReceived, {
        response: `${responseEmoji} ${responseText}`
      });

      const thankYouText = `${confirmationText}\n\n${texts.responses.thankYou}`;
      
      const keyboard = createInlineKeyboard([
        { text: 'üìÖ –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è', callback_data: 'upcoming_events' },
        standardButtons.mainMenu
      ], 2);

      await safeSendMessage(ctx, thankYouText, keyboard, { parseMode: 'HTML' });
      await ctx.answerCbQuery(`${responseEmoji} –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`);

      console.log(`üìù –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${responseText}`);

      return {
        success: true,
        response: responseText,
        responseId: saveResult.id
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
      
      await safeSendMessage(ctx, texts.errors.general);
      await ctx.answerCbQuery(texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * [EN] Show all user responses
   */
  async showUserResponses(ctx, userId) {
    try {
      const responses = this.responseUtils.getUserResponses(userId);

      if (!responses || responses.length === 0) {
        const noResponsesText = `${texts.responses.title}\n\n${texts.responses.noResponses}`;
        const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);

        await safeSendMessage(ctx, noResponsesText, keyboard);
        return { success: true, responseCount: 0 };
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const formattedResponses = responses.slice(0, 10).map((response, index) => {
        const date = new Date(response.created_at).toLocaleDateString('ru-RU');
        return `${index + 1}. ${response.message}\n   üìÖ ${date}`;
      }).join('\n\n');

      const responseText = `${texts.responses.title}\n\n${formattedResponses}`;

      if (responses.length > 10) {
        responseText += `\n\n... –∏ –µ—â—ë ${responses.length - 10} –æ—Ç–≤–µ—Ç–æ–≤`;
      }

      const buttons = [
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'my_responses' },
        standardButtons.mainMenu
      ];

      const keyboard = createInlineKeyboard(buttons, 2);

      await safeSendMessage(ctx, responseText, keyboard, { parseMode: 'HTML' });

      return {
        success: true,
        responseCount: responses.length,
        displayedCount: Math.min(responses.length, 10)
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * [EN] Handle text response from user
   */
  async handleTextResponse(ctx, userId, messageText) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
      if (messageText.startsWith('/')) {
        return { success: false, error: 'Command received instead of response' };
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
      if (!messageText || messageText.trim().length === 0) {
        await safeSendMessage(ctx, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:');
        return { success: false, error: 'Empty response' };
      }

      if (messageText.length > 1000) {
        await safeSendMessage(ctx, '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤:');
        return { success: false, error: 'Response too long' };
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      const saveResult = this.responseUtils.saveUserResponse(userId, messageText.trim());

      if (!saveResult.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const confirmationText = `${texts.responses.thankYou}\n\nüìù –í–∞—à –æ—Ç–≤–µ—Ç: "${messageText.trim()}"`;
      
      const keyboard = createInlineKeyboard([
        { text: 'üí¨ –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã', callback_data: 'my_responses' },
        standardButtons.mainMenu
      ], 2);

      await safeSendMessage(ctx, confirmationText, keyboard, { parseMode: 'HTML' });

      console.log(`üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);

      return {
        success: true,
        response: messageText.trim(),
        responseId: saveResult.id
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * [EN] Request custom response from user
   */
  async requestCustomResponse(ctx, prompt = null) {
    try {
      const requestText = prompt || texts.responses.prompt;
      
      const keyboard = createInlineKeyboard([
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_response' },
        standardButtons.mainMenu
      ], 2);

      await safeSendMessage(ctx, requestText, keyboard, { parseMode: 'HTML' });

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error.message);
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
   * [EN] Get response statistics (for administrators)
   */
  async getResponseStats() {
    try {
      const allResponses = this.responseUtils.getAllResponses();
      
      const stats = {
        totalResponses: allResponses.length,
        uniqueUsers: new Set(allResponses.map(r => r.user_id)).size,
        recentResponses: allResponses.filter(r => {
          const responseDate = new Date(r.created_at);
          const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
          return responseDate > dayAgo;
        }).length
      };

      return {
        success: true,
        stats
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤:', error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = {
  UserResponse
};