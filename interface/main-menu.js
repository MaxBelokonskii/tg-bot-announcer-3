/**
 * [RU] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
 * [EN] Bot main menu
 */

const texts = require('../bot/texts');
const { createInlineKeyboard, safeSendMessage, standardButtons } = require('../utils/message-helpers');
const { AttendanceLogic } = require('../features/attendance/logic');
const { EventInfoLogic } = require('../features/event-info/logic');
const { AdminLogic } = require('../features/admin/logic');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
 * [EN] Main menu management class
 */
class MainMenu {
  constructor(database) {
    this.database = database;
    this.attendanceLogic = new AttendanceLogic(database);
    this.eventInfoLogic = new EventInfoLogic(database);
    this.adminLogic = new AdminLogic(database);
  }

  /**
   * [RU] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * [EN] Generate menu items based on user role
   */
  generateMenuItems(userId) {
    const isAdmin = this.adminLogic.isAdmin(userId);
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const menuItems = [
      { text: texts.menu.buttons.changeAttendance, callback_data: 'change_attendance' },
      { text: texts.menu.buttons.eventDetails, callback_data: 'event_details' },
      { text: texts.menu.buttons.usefulInfo, callback_data: 'useful_info' },
      { text: texts.menu.buttons.upcomingEvents, callback_data: 'upcoming_events' },
      { text: texts.menu.buttons.help, callback_data: 'help' }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (isAdmin) {
      menuItems.splice(3, 0, { text: texts.menu.buttons.adminGuestList, callback_data: 'admin_guest_list' });
    }

    return menuItems;
  }

  /**
   * [RU] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
   * [EN] Display main menu
   */
  async show(ctx, user = null) {
    try {
      console.log(`üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
      
      const userName = user ? user.full_name : (ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
      const userId = ctx.from.id.toString();
      
      const menuText = `${texts.menu.title}\n\n–ü—Ä–∏–≤–µ—Ç, ${userName}! ${texts.menu.description}`;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const menuItems = this.generateMenuItems(userId);
      console.log('üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é (',
        menuItems.length, '–∫–Ω–æ–ø–æ–∫):', 
        menuItems.map(item => ({ text: item.text, callback_data: item.callback_data }))
      );
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
      if (!Array.isArray(menuItems) || menuItems.length === 0) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é');
        await safeSendMessage(ctx, texts.errors.general);
        return { success: false, error: 'Empty menu items' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
      for (const item of menuItems) {
        if (!item.text || !item.callback_data) {
          console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞:', item);
        }
      }
      
      console.log('‚å®Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...');
      const keyboard = createInlineKeyboard(menuItems, 2);
      console.log('‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', !!keyboard);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      if (!keyboard) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
        await safeSendMessage(ctx, texts.errors.general);
        return { success: false, error: 'Keyboard creation failed' };
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é...');
      await safeSendMessage(ctx, menuText, keyboard, { parseMode: 'HTML' });
      console.log('‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error.message);
      console.error('‚ùå Stack trace:', error.stack);
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
   * [EN] Handle menu button presses
   */
  async handleCallback(ctx, callback) {
    try {
      const userId = ctx.from.id.toString();
      
      switch (callback) {
        case 'change_attendance':
          return await this.attendanceLogic.handleAttendanceChange(ctx, userId);
        
        case 'event_details':
          return await this.eventInfoLogic.showEventDetails(ctx);
        
        case 'useful_info':
          return await this.eventInfoLogic.showUsefulInfo(ctx);
        
        case 'admin_guest_list':
          return await this.adminLogic.showGuestList(ctx);
        
        case 'admin_refresh_guest_list':
          return await this.adminLogic.showGuestList(ctx);
        
        case 'upcoming_events':
          return await this.showUpcomingEvents(ctx);
        
        case 'my_responses':
          return await this.showMyResponses(ctx);
        
        case 'settings':
          return await this.showSettings(ctx);
        
        case 'help':
          return await this.showHelp(ctx);
        
        case 'main_menu':
          return await this.show(ctx);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        case 'attendance_attending':
          return await this.attendanceLogic.handleAttendanceStatusSelect(ctx, userId, 'attending');
        
        case 'attendance_not_attending':
          return await this.attendanceLogic.handleAttendanceStatusSelect(ctx, userId, 'not_attending');
        
        case 'attendance_maybe':
          return await this.attendanceLogic.handleAttendanceStatusSelect(ctx, userId, 'maybe');
        
        default:
          await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
          return { success: false, error: 'Unknown callback' };
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback ${callback}:`, error.message);
      
      await ctx.answerCbQuery(texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
   * [EN] Show upcoming events (placeholder)
   */
  async showUpcomingEvents(ctx) {
    const text = `${texts.events.title}\n\n${texts.events.noEvents}`;
    const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);

    await safeSendMessage(ctx, text, keyboard);
    await ctx.answerCbQuery();

    return { success: true };
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
   * [EN] Show user responses (placeholder)
   */
  async showMyResponses(ctx) {
    const text = `${texts.responses.title}\n\n${texts.responses.noResponses}`;
    const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);

    await safeSendMessage(ctx, text, keyboard);
    await ctx.answerCbQuery();

    return { success: true };
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)
   * [EN] Show settings (placeholder)
   */
  async showSettings(ctx) {
    const text = `${texts.settings.title}\n\n–§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.`;
    const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);

    await safeSendMessage(ctx, text, keyboard);
    await ctx.answerCbQuery();

    return { success: true };
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
   * [EN] Show help
   */
  async showHelp(ctx) {
    const text = texts.help.description;
    const keyboard = createInlineKeyboard([standardButtons.mainMenu], 1);

    await safeSendMessage(ctx, text, keyboard);
    await ctx.answerCbQuery();

    return { success: true };
  }
}

module.exports = {
  MainMenu
};