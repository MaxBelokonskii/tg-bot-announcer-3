/**
 * [RU] –≠–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * [EN] Welcome screen for new users
 */

const texts = require('../bot/texts');
const { createInlineKeyboard, safeSendMessage } = require('../utils/message-helpers');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 * [EN] Welcome screen management class
 */
class WelcomeScreen {
  /**
   * [RU] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
   * [EN] Display welcome screen
   */
  async show(ctx) {
    try {
      const userName = ctx.from.first_name || ctx.from.username || '–î—Ä—É–≥';
      
      const welcomeText = `${texts.welcome.title}\n\n${texts.welcome.greeting}`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const buttons = [
        { text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
        { text: '‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', callback_data: 'help' }
      ];

      const keyboard = createInlineKeyboard(buttons, 2);

      await safeSendMessage(ctx, welcomeText, keyboard, { parseMode: 'HTML' });

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error.message);
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
   * [EN] Show extended welcome with instructions
   */
  async showDetailed(ctx, user) {
    try {
      const welcomeText = texts.formatText(texts.welcome.nameConfirm, {
        name: user.full_name
      });

      const instructionsText = `
${welcomeText}

üéØ **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**

üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö** - –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
üí¨ **–°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤** - —Å–æ–æ–±—â–∞–π—Ç–µ –æ —Å–≤–æ–µ–º —É—á–∞—Å—Ç–∏–∏ –≤ —Å–æ–±—ã—Ç–∏—è—Ö  
üìä **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ** - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç, –∫—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å

üöÄ **–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /menu** –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!
      `;

      const buttons = [
        { text: 'üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'main_menu' },
        { text: '‚ùì –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞', callback_data: 'help' }
      ];

      const keyboard = createInlineKeyboard(buttons, 2);

      await safeSendMessage(ctx, instructionsText, keyboard, { parseMode: 'HTML' });

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error.message);
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–∫–∞–∑ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * [EN] Show brief instructions for existing users
   */
  async showReturning(ctx, user) {
    try {
      const welcomeBackText = `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.full_name}!

–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.

üìÖ –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
üí¨ –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`;

      const buttons = [
        { text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
        { text: 'üìÖ –°–æ–±—ã—Ç–∏—è', callback_data: 'upcoming_events' }
      ];

      const keyboard = createInlineKeyboard(buttons, 2);

      await safeSendMessage(ctx, welcomeBackText, keyboard, { parseMode: 'HTML' });

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      
      await safeSendMessage(ctx, texts.errors.general);
      
      return { success: false, error: error.message };
    }
  }
}

module.exports = {
  WelcomeScreen
};