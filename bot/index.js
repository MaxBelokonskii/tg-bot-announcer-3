/**
 * [RU] –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
 * [EN] Main bot initialization file
 */

require('dotenv').config();
const { Telegraf } = require('telegraf');
const { getDatabaseConnection } = require('../database/connection');
const { MessageRouter } = require('./router');
const { ReminderSchedulerLogic } = require('../features/reminder-scheduler/logic');
const { MessageDeliveryLogic } = require('../features/message-delivery/logic');

/**
 * [RU] –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
 * [EN] Main bot class
 */
class TelegramBot {
  constructor() {
    this.bot = null;
    this.database = null;
    this.router = null;
    this.scheduler = null;
    this.delivery = null;
    this.isRunning = false;
  }

  /**
   * [RU] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   * [EN] Initialize bot and all components
   */
  async initialize() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
      if (!process.env.BOT_TOKEN) {
        throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }

      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      this.bot = new Telegraf(process.env.BOT_TOKEN);
      console.log('‚úÖ Telegraf –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      this.database = getDatabaseConnection(process.env.DATABASE_PATH || './database/bot_database.db');
      await this.database.connect();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.validateDatabase();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      this.scheduler = new ReminderSchedulerLogic(this.database.getDatabase(), this.bot);
      console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      this.delivery = new MessageDeliveryLogic(this.database.getDatabase());
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
      this.router = new MessageRouter(
        this.database.getDatabase(),
        this.scheduler,
        this.delivery,
        this.bot
      );
      console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
      this.setupMiddleware();
      console.log('‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
      if (process.env.SCHEDULER_ENABLED !== 'false') {
        this.scheduler.start();
        console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω');
      }

      console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
   * [EN] Database validation at startup
   */
  async validateDatabase() {
    try {
      const db = this.database.getDatabase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
      const requiredTables = ['users', 'admin_messages', 'scheduled_messages', 'delivery_logs', 'user_responses'];
      
      for (const tableName of requiredTables) {
        const table = db.prepare(`
          SELECT name FROM sqlite_master 
          WHERE type='table' AND name=?
        `).get(tableName);
        
        if (!table) {
          throw new Error(`–¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
        
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã admin_messages
      const adminMessageColumns = db.prepare(`PRAGMA table_info(admin_messages)`).all();
      const requiredColumns = [
        'id', 'message_text', 'message_type', 'sent_by', 'sent_at',
        'total_recipients', 'delivered_count', 'failed_count', 'blocked_count'
      ];
      
      const existingColumns = adminMessageColumns.map(col => col.name);
      for (const columnName of requiredColumns) {
        if (!existingColumns.includes(columnName)) {
          throw new Error(`–ö–æ–ª–æ–Ω–∫–∞ ${columnName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ admin_messages`);
        }
      }
      
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã admin_messages –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  /**
   * [RU] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
   * [EN] Setup middleware
   */
  setupMiddleware() {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      const user = ctx.from;
      
      console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} (@${user.username || 'unknown'}): ${ctx.message?.text || ctx.callbackQuery?.data || 'callback/action'}`);
      
      try {
        await next();
        const duration = Date.now() - start;
        console.log(`‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ ${duration}–º—Å`);
      } catch (error) {
        const duration = Date.now() - start;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (${duration}–º—Å):`, error.message);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try {
          await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        } catch (replyError) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError.message);
        }
      }
    });

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    const userLastAction = new Map();
    this.bot.use(async (ctx, next) => {
      const userId = ctx.from.id;
      const now = Date.now();
      const lastAction = userLastAction.get(userId) || 0;
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ - 500–º—Å
      if (now - lastAction < 500) {
        console.log(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return;
      }
      
      userLastAction.set(userId, now);
      await next();
    });
  }

  /**
   * [RU] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   * [EN] Setup event handlers
   */
  setupEventHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      await this.router.handleStart(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /menu
    this.bot.command('menu', async (ctx) => {
      await this.router.handleMenu(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /responses
    this.bot.command('responses', async (ctx) => {
      await this.router.handleResponses(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    this.bot.command('stats', async (ctx) => {
      await this.router.handleStats(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /admin_message (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    this.bot.command('admin_message', async (ctx) => {
      await this.router.handleAdminMessage(ctx, this.bot);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
    this.bot.on('callback_query', async (ctx) => {
      await this.router.handleCallback(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      await this.router.handleText(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
    this.bot.catch(async (err, ctx) => {
      console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
      
      if (ctx) {
        try {
          await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.');
        } catch (replyError) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError.message);
        }
      }
    });
  }

  /**
   * [RU] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   * [EN] Start bot
   */
  async start() {
    try {
      if (this.isRunning) {
        console.log('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        return { success: false, error: 'Bot already running' };
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!this.bot) {
        const initResult = await this.initialize();
        if (!initResult.success) {
          throw new Error(initResult.error);
        }
      }

      console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
      await this.bot.launch();
      this.isRunning = true;
      
      console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ
      if (process.env.ADMIN_ID) {
        try {
          await this.delivery.sendAdminNotification(
            this.bot,
            process.env.ADMIN_ID,
            'üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
            false
          );
        } catch (error) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ');
        }
      }

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
      this.isRunning = false;
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   * [EN] Stop bot
   */
  async stop() {
    try {
      if (!this.isRunning) {
        console.log('‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
        return { success: false, error: 'Bot not running' };
      }

      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
      if (this.scheduler) {
        this.scheduler.stop();
        console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
      if (this.bot) {
        this.bot.stop();
        console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      if (this.database) {
        this.database.close();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      }

      this.isRunning = false;
      console.log('üèÅ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
   * [EN] Get bot status
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      hasBot: !!this.bot,
      hasDatabase: !!this.database,
      hasScheduler: !!this.scheduler,
      hasDelivery: !!this.delivery,
      hasRouter: !!this.router,
      schedulerStatus: this.scheduler ? this.scheduler.getStatus() : null
    };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', async () => {
  console.log('üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT');
  if (botInstance) {
    await botInstance.stop();
  }
  process.exit(0);
});

process.once('SIGTERM', async () => {
  console.log('üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM');
  if (botInstance) {
    await botInstance.stop();
  }
  process.exit(0);
});

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const botInstance = new TelegramBot();

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  (async () => {
    try {
      const result = await botInstance.start();
      if (!result.success) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:', result.error);
        process.exit(1);
      }
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    }
  })();
}

module.exports = {
  TelegramBot,
  botInstance
};