/**
 * [RU] –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
 * [EN] Bot message router
 */

const { OnboardingLogic } = require('../features/onboarding/logic');
const { MainMenu } = require('../interface/main-menu');
const { WelcomeScreen } = require('../interface/welcome-screen');
const { UserResponse } = require('../interface/user-response');
const { AttendanceLogic } = require('../features/attendance/logic');
const { EventInfoLogic } = require('../features/event-info/logic');
const { AdminLogic } = require('../features/admin/logic');
const texts = require('./texts');

/**
 * [RU] –ö–ª–∞—Å—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * [EN] Message routing class
 */
class MessageRouter {
  constructor(database, schedulerLogic, deliveryLogic, bot = null) {
    this.database = database;
    this.schedulerLogic = schedulerLogic;
    this.deliveryLogic = deliveryLogic;
    this.bot = bot; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.onboarding = new OnboardingLogic(database);
    this.mainMenu = new MainMenu(database);
    this.welcomeScreen = new WelcomeScreen();
    this.userResponse = new UserResponse(database);
    this.attendanceLogic = new AttendanceLogic(database);
    this.eventInfoLogic = new EventInfoLogic(database);
    this.adminLogic = new AdminLogic(database);
  }

  /**
   * [RU] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ)
   * [EN] Set bot instance (if not passed in constructor)
   */
  setBotInstance(bot) {
    this.bot = bot;
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   * [EN] Handle /start command
   */
  async handleStart(ctx) {
    try {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start`);
      
      const result = await this.onboarding.handleStartCommand(ctx);
      
      if (result.success && result.user && !result.isNewUser) {
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è
        await this.welcomeScreen.showReturning(ctx, result.user);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error.message);
      await ctx.reply(texts.errors.general);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
   * [EN] Handle /menu command
   */
  async handleMenu(ctx) {
    try {
      console.log(`üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user = await this.onboarding.api.getUser(ctx.from.id.toString());
      
      if (!user) {
        await ctx.reply(texts.errors.notRegistered);
        return { success: false, error: 'User not registered' };
      }
      
      return await this.mainMenu.show(ctx, user);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /menu:', error.message);
      await ctx.reply(texts.errors.general);
      return { success: false, error: error.message };
    }
  }



  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /responses
   * [EN] Handle /responses command
   */
  async handleResponses(ctx) {
    try {
      console.log(`üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user = await this.onboarding.api.getUser(ctx.from.id.toString());
      
      if (!user) {
        await ctx.reply(texts.errors.notRegistered);
        return { success: false, error: 'User not registered' };
      }
      
      return await this.userResponse.showUserResponses(ctx, user.id);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /responses:', error.message);
      await ctx.reply(texts.errors.general);
      return { success: false, error: error.message };
    }
  }



  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_message (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
   * [EN] Handle /admin_message command (admin only)
   */
  async handleAdminMessage(ctx, bot) {
    try {
      const userId = ctx.from.id.toString();
      
      if (!this.adminLogic.isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return { success: false, error: 'Unauthorized' };
      }
      
      console.log(`üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.from.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /admin_message`);
      
      return await this.adminLogic.handleAdminMessage(ctx, bot);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /admin_message:', error.message);
      await ctx.reply(texts.errors.general);
      return { success: false, error: error.message };
    }
  }



  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
   * [EN] Handle /stats command (admin only)
   */
  async handleStats(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const adminId = process.env.ADMIN_ID;
      
      if (!adminId || userId !== adminId) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return { success: false, error: 'Unauthorized' };
      }
      
      console.log(`üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É`);
      
      return await this.adminLogic.showStats(ctx);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /stats:', error.message);
      await ctx.reply(texts.errors.general);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
   * [EN] Handle callback queries (button presses)
   */
  async handleCallback(ctx) {
    try {
      const callbackData = ctx.callbackQuery.data;
      const userId = ctx.from.id.toString();
      
      console.log(`üîò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: ${callbackData}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∫—Ä–æ–º–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
      const publicCallbacks = ['main_menu'];
      if (!publicCallbacks.includes(callbackData)) {
        const user = await this.onboarding.api.getUser(userId);
        if (!user) {
          await ctx.answerCbQuery(texts.errors.notRegistered);
          await ctx.reply(texts.errors.notRegistered);
          return { success: false, error: 'User not registered' };
        }
      }

      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É callback
      if (callbackData.startsWith('response_')) {
        return await this.handleResponseCallback(ctx, callbackData, userId);
      } else if (callbackData.startsWith('attendance_')) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        return await this.mainMenu.handleCallback(ctx, callbackData);
      } else if (callbackData.startsWith('admin_')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await this.adminLogic.validateAdminCallback(ctx, callbackData);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if (callbackData === 'admin_confirm_send') {
          if (!this.bot) {
            throw new Error('Bot instance not available for admin message sending');
          }
          return await this.adminLogic.confirmMessageSending(ctx, this.bot);
        } else if (callbackData === 'admin_cancel_send') {
          return await this.adminLogic.cancelMessageSending(ctx);
        } else {
          return await this.mainMenu.handleCallback(ctx, callbackData);
        }
      } else {
        // –û–±—â–∏–µ callbacks –¥–ª—è –º–µ–Ω—é
        return await this.mainMenu.handleCallback(ctx, callbackData);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error.message);
      await ctx.answerCbQuery(texts.errors.general);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
   * [EN] Handle event response callbacks
   */
  async handleResponseCallback(ctx, callbackData, userId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const user = await this.onboarding.api.getUser(userId);
      if (!user) {
        throw new Error('User not found');
      }

      return await this.userResponse.handleEventResponse(ctx, callbackData, user.id);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ response callback (${callbackData}):`, error.message);
      await ctx.answerCbQuery(texts.errors.general);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * [EN] Handle text messages
   */
  async handleText(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const messageText = ctx.message.text;
      
      console.log(`üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageText.substring(0, 50)}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      if (this.onboarding.isUserOnboarding(userId)) {
        return await this.onboarding.handleOnboardingMessage(ctx);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user = await this.onboarding.api.getUser(userId);
      if (!user) {
        await ctx.reply(texts.errors.notRegistered);
        return { success: false, error: 'User not registered' };
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
      const result = await this.userResponse.handleTextResponse(ctx, user.id, messageText);
      
      if (!result.success) {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await ctx.reply(`
–ù–µ –ø–æ–Ω–∏–º–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:

üìã /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üí¨ /responses - –º–æ–∏ –æ—Ç–≤–µ—Ç—ã

–ò–ª–∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.
        `);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      await ctx.reply(texts.errors.general);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
   * [EN] Handle unknown commands
   */
  async handleUnknownCommand(ctx) {
    try {
      console.log(`‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É`);
      
      await ctx.reply(texts.errors.invalidCommand);
      
      return { success: false, error: 'Unknown command' };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * [RU] –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
   * [EN] Periodic cleanup of old states
   */
  scheduleCleanup() {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => {
      try {
        this.onboarding.cleanupOldStates();
        this.deliveryLogic.cleanupCompletedDeliveries();
        console.log('üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏:', error.message);
      }
    }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
  }

  /**
   * [RU] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
   * [EN] Get router statistics
   */
  async getRouterStats() {
    try {
      const onboardingStats = this.onboarding.getOnboardingStats();
      const deliveryStats = await this.deliveryLogic.getOverallStats();
      const schedulerStats = await this.schedulerLogic.getStats();
      
      return {
        success: true,
        stats: {
          onboarding: onboardingStats,
          delivery: deliveryStats.success ? deliveryStats.stats : null,
          scheduler: schedulerStats.success ? schedulerStats.stats : null,
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞:', error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = {
  MessageRouter
};