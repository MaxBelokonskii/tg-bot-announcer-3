#!/usr/bin/env node

/**
 * [RU] –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
 * [EN] Module integration testing script
 */

require('dotenv').config();
const { getDatabaseConnection } = require('./database/connection');
const { OnboardingAPI } = require('./features/onboarding/api');
const { ReminderSchedulerAPI } = require('./features/reminder-scheduler/api');
const { MessageDeliveryAPI } = require('./features/message-delivery/api');

console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π...\n');

async function testDatabaseConnection() {
  console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const db = getDatabaseConnection('./test_database.db');
    await db.connect();
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const database = db.getDatabase();
    const tables = database.prepare("SELECT name FROM sqlite_master WHERE type='table'").all();
    
    const expectedTables = ['users', 'user_responses', 'scheduled_messages', 'delivery_logs'];
    const actualTables = tables.map(t => t.name);
    
    for (const expectedTable of expectedTables) {
      if (actualTables.includes(expectedTable)) {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ '${expectedTable}' —Å–æ–∑–¥–∞–Ω–∞`);
      } else {
        throw new Error(`–¢–∞–±–ª–∏—Ü–∞ '${expectedTable}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }
    
    db.close();
    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return { success: false, error: error.message };
  }
}

async function testOnboardingModule() {
  console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞...');
  
  try {
    const db = getDatabaseConnection('./test_database.db');
    await db.connect();
    
    const api = new OnboardingAPI(db.getDatabase());
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const createResult = await api.createUser('123456789', '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    if (createResult.success) {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getResult = await api.getUser('123456789');
    if (getResult && getResult.full_name === '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    const existsResult = await api.userExists('123456789');
    if (existsResult) {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      throw new Error('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    db.close();
    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error.message);
    return { success: false, error: error.message };
  }
}

async function testSchedulerModule() {
  console.log('\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
  
  try {
    const db = getDatabaseConnection('./test_database.db');
    await db.connect();
    
    const api = new ReminderSchedulerAPI(db.getDatabase());
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const futureDate = new Date(Date.now() + 24 * 60 * 60 * 1000); // –∑–∞–≤—Ç—Ä–∞
    const createResult = await api.createReminder(
      '–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ',
      futureDate
    );
    
    if (createResult.success) {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const getResult = await api.getReminders();
      if (getResult.success && getResult.reminders.length > 0) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      }
      
      // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      const updateResult = await api.updateReminderStatus(
        createResult.reminderId, 
        'sent'
      );
      if (updateResult.success) {
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
      }
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
    }
    
    db.close();
    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error.message);
    return { success: false, error: error.message };
  }
}

async function testDeliveryModule() {
  console.log('\nüì® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏...');
  
  try {
    const db = getDatabaseConnection('./test_database.db');
    await db.connect();
    
    const api = new MessageDeliveryAPI(db.getDatabase());
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResult = await api.getActiveUsers();
    if (usersResult.success) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      if (usersResult.users.length > 0) {
        // –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
        const logResult = await api.logDelivery(
          usersResult.users[0].telegram_id,
          1,
          'delivered'
        );
        
        if (logResult.success) {
          console.log('‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
          
          // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
          const statsResult = await api.getDeliveryStats(1);
          if (statsResult.success) {
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
          } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
          }
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É');
        }
      }
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    
    db.close();
    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:', error.message);
    return { success: false, error: error.message };
  }
}

async function cleanupTestData() {
  console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const fs = require('fs');
    const testDbPath = './test_database.db';
    
    if (fs.existsSync(testDbPath)) {
      fs.unlinkSync(testDbPath);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞');
    }
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    return { success: false, error: error.message };
  }
}

async function runAllTests() {
  const results = [];
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  results.push(await testDatabaseConnection());
  results.push(await testOnboardingModule());
  results.push(await testSchedulerModule());
  results.push(await testDeliveryModule());
  
  // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  await cleanupTestData();
  
  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  
  const successful = results.filter(r => r.success).length;
  const total = results.length;
  
  if (successful === total) {
    console.log(`üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! (${successful}/${total})`);
    console.log('\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    process.exit(0);
  } else {
    console.log(`‚ùå –ü—Ä–æ–π–¥–µ–Ω–æ ${successful} –∏–∑ ${total} —Ç–µ—Å—Ç–æ–≤`);
    console.log('\nüîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllTests().catch(error => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  });
}

module.exports = {
  testDatabaseConnection,
  testOnboardingModule,
  testSchedulerModule,
  testDeliveryModule,
  runAllTests
};